<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一叶知秋</title>
  
  <subtitle>白白的过一天，无所事事，就像犯了窃盗罪一样。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-30T10:00:43.252Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lixiaoyan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue前端面试题</title>
    <link href="http://yoursite.com/2018/10/30/vue%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/30/vue前端面试题/</id>
    <published>2018-10-30T09:54:49.000Z</published>
    <updated>2018-10-30T10:00:43.252Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、active-class是哪个组件的属性？嵌套路由怎么定义？</strong><br>答：vue-router模块的router-link组件。</p><p><strong>2、怎么定义vue-router的动态路由？怎么获取传过来的动态参数？</strong><br>答：在router目录下的index.js文件中，对path属性加上/:id。  使用router对象的params.id</p><p><strong>3、vue-router有哪几种导航钩子？</strong><br>答：三种，一种是全局导航钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截。第二种：组件内的钩子；第三种：单独路由独享组件</p><p><strong>4、scss是什么？安装使用的步骤是？有哪几大特性？</strong><br>答：预处理css，把css当前函数编写，定义变量,嵌套。 先装css-loader、node-loader、sass-loader等加载器模块，在webpack-base.config.js配置文件中加多一个拓展:extenstion，再加多一个模块：module里面test、loader</p><p><strong>4.1、scss是什么？在vue.cli中的安装使用步骤是？有哪几大特性？</strong><br>答：css的预编译。</p><p>使用步骤：</p><p>第一步：用npm 下三个loader（sass-loader、css-loader、node-sass）</p><p>第二步：在build目录找到webpack.base.config.js，在那个extends属性中加一个拓展.scss</p><p>第三步：还是在同一个文件，配置一个module属性</p><p>第四步：然后在组件的style标签加上lang属性 ，例如：lang=”scss”</p><p>有哪几大特性:</p><p>1、可以用变量，例如（$变量名称=值）；</p><p>2、可以用混合器，例如（）</p><p>3、可以嵌套</p><p><strong>5、mint-ui是什么？怎么使用？说出至少三个组件使用方法？</strong></p><p>答：基于vue的前端组件库。npm安装，然后import样式和js，vue.use（mintUi）全局引入。在单个组件局部引入：import {Toast} from ‘mint-ui’。组件一：Toast(‘登录成功’)；组件二：mint-header；组件三：mint-swiper</p><p><strong>6、v-model是什么？怎么使用？ vue中标签怎么绑定事件？</strong></p><p>答：可以实现双向绑定，指令（v-class、v-for、v-if、v-show、v-on）。vue的model层的data属性。绑定事件：<input @click="doLog()"></p><p><strong>7、axios是什么？怎么使用？描述使用它实现登录功能的流程？</strong></p><p>答：请求后台资源的模块。npm install axios -S装好，然后发送的是跨域，需在配置文件中config/index.js进行设置。后台如果是Tp5则定义一个资源路由。js中使用import进来，然后.get或.post。返回在.then函数中如果成功，失败则是在.catch函数中</p><p><strong>8、axios+tp5进阶中，调用axios.post(‘api/user’)是进行的什么操作？axios.put(‘api/user/8′)呢？</strong></p><p>答：跨域，添加用户操作，更新操作。</p><p><strong>9、什么是RESTful API？怎么使用?</strong></p><p>答：是一个api的标准，无状态请求。请求的路由地址是固定的，如果是tp5则先路由配置中把资源路由配置好。标准有：.post .put .delete</p><p><strong>10、vuex是什么？怎么使用？哪种功能场景使用它？</strong></p><p>答：vue框架中状态管理。在main.js引入store，注入。新建了一个目录store，….. export 。场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车</p><p><strong>11、mvvm框架是什么？它和其它框架（jquery）的区别是什么？哪些场景适合？</strong></p><p>答：一个model+view+viewModel框架，数据模型model，viewModel连接两个</p><p>区别：vue数据驱动，通过数据来显示视图层而不是节点操作。</p><p>场景：数据操作比较多的场景，更加便捷</p><p><strong>12、自定义指令（v-check、v-focus）的方法有哪些？它有哪些钩子函数？还有哪些钩子函数参数？</strong></p><p>答：全局定义指令：在vue对象的directive方法里面有两个参数，一个是指令名称，另外一个是函数。组件内定义指令：directives</p><p>钩子函数：bind（绑定事件触发）、inserted(节点插入的时候触发)、update（组件内相关更新）</p><p>钩子函数参数：el、binding</p><p><strong>13、说出至少4种vue当中的指令和它的用法？</strong></p><p>答：v-if：判断是否隐藏；v-for：数据循环出来；v-bind:class：绑定一个属性；v-model：实现双向绑定</p><p><strong>14、vue-router是什么？它有哪些组件？</strong></p><p>答：vue用来写路由一个插件。router-link、router-view</p><p><strong>15、导航钩子有哪些？它们有哪些参数？</strong></p><p>答：导航钩子有：a/全局钩子和组件内独享的钩子。b/beforeRouteEnter、afterEnter、beforeRouterUpdate、beforeRouteLeave</p><p>参数：有to（去的那个路由）、from（离开的路由）、next（一定要用这个函数才能去到下一个路由，如果不用就拦截）最常用就这几种</p><p><strong>16、Vue的双向数据绑定原理是什么？</strong></p><p>答：vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><p><strong>具体步骤：</strong></p><p><strong>第一步：需要observe的数据对象进行递归遍历</strong>，包括子属性对象的属性，都加上 <code>setter</code>和<code>getter</code><br>这样的话，给这个对象的某个值赋值，就会触发<code>setter</code>，那么就能监听到了数据变化</p><p><strong>第二步：compile解析模板指令</strong>，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</p><p><strong>第三步：Watcher订阅者是Observer和Compile之间通信的桥梁</strong>，主要做的事情是:<br>1、在自身实例化时往属性订阅器(dep)里面添加自己<br>2、自身必须有一个update()方法<br>3、待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。</p><p><strong>第四步：MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者</strong>，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。</p><p>ps：16题答案同样适合”<strong>vue data是怎么实现的？”</strong>此面试题<strong>。</strong></p><p><strong>17、请详细说下你对vue生命周期的理解？</strong></p><p>答：总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后。</p><p><strong>创建前/后：</strong> 在beforeCreated阶段，vue实例的挂载元素$el和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，$el还没有。</p><p><strong>载入前/后：</strong>在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染。</p><p><strong>更新前/后：</strong>当data变化时，会触发beforeUpdate和updated方法。</p><p><strong>销毁前/后：</strong>在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在</p><p><strong>18、请说下封装 vue 组件的过程？</strong></p><p>答：首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：<strong>效率低</strong>、<strong>难维护</strong>、<strong>复用性</strong>等问题。</p><p>然后，使用Vue.extend方法创建一个组件，然后使用Vue.component方法注册组件。子组件需要数据，可以在props中接受定义。而子组件修改好数据后，想把数据传递给父组件。可以采用emit方法。</p><p><strong>19、你是怎么认识vuex的？</strong></p><p>答：vuex可以理解为一种开发模式或框架。比如PHP有thinkphp，java有spring等。</p><p>答：vuex可以理解为一种开发模式或框架。比如PHP有thinkphp，java有spring等。<br>通过状态（数据源）集中管理驱动组件的变化（好比spring的IOC容器对bean进行集中管理）。</p><p>应用级的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。</p><p><strong>20、vue-loader是什么？使用它的用途有哪些？</strong></p><p>答：解析.vue文件的一个加载器，跟template/js/style转换成js模块。</p><p>用途：js可以写es6、style样式可以scss或less、template可以加jade等</p><p><strong>21、请说出vue.cli项目中src目录每个文件夹和文件的用法？</strong></p><p>答：assets文件夹是放静态资源；components是放组件；router是定义路由相关的配置;view视图；app.vue是一个应用主组件；main.js是入口文件</p><p><strong>22、vue.cli中怎样使用自定义的组件？有遇到过哪些问题吗？</strong></p><p>答：第一步：在components目录新建你的组件文件（smithButton.vue），script一定要export default {</p><p>第二步：在需要用的页面（组件）中导入：import smithButton from ‘../components/smithButton.vue’</p><p>第三步：注入到vue的子组件的components属性上面,components:{smithButton}</p><p>第四步：在template视图view中使用，<smith-button>  </smith-button></p><p>第四步：在template视图view中使用，<smith-button>  </smith-button><br>问题有：smithButton命名，使用的时候则smith-button。</p><p><strong>23、聊聊你对Vue.js的template编译的理解？</strong></p><p>答：简而言之，就是先转化成AST树，再得到的render函数返回VNode（Vue的虚拟DOM节点）</p><p>详情步骤：</p><p>首先，通过compile编译器把template编译成AST语法树（abstract syntax tree 即 源代码的抽象语法结构的树状表现形式），compile是createCompiler的返回值，createCompiler是用以创建编译器的。另外compile还负责合并option。</p><p>然后，AST会经过generate（将AST语法树转化成render funtion字符串的过程）得到render函数，render的返回值是VNode，VNode是Vue的虚拟DOM节点，里面有（标签名、子节点、文本等等）</p><p>然后，AST会经过generate（将AST语法树转化成render funtion字符串的过程）得到render函数，render的返回值是VNode，VNode是Vue的虚拟DOM节点，里面有（标签名、子节点、文本等等）</p><p><strong>挑战一下：</strong></p><p><strong>1、vue响应式原理？</strong></p><p><strong>2、vue-router实现原理？</strong></p><p><strong>3、为什么要选vue？与其它框架对比的优势和劣势？</strong></p><p><strong>4、vue如何实现父子组件通信，以及非父子组件通信？</strong></p><p><strong>5、vuejs与angularjs以及react的区别？</strong></p><p><strong>6、vuex是用来做什么的？7、vue源码结构</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;1、active-class是哪个组件的属性？嵌套路由怎么定义？&lt;/strong&gt;&lt;br&gt;答：vue-router模块的router-link组件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、怎么定义vue-router的动态路由？怎么获取传过来的动态参数？&lt;/st
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序入门笔记</title>
    <link href="http://yoursite.com/2018/10/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/10/30/微信小程序入门笔记/</id>
    <published>2018-10-30T08:17:19.000Z</published>
    <updated>2018-10-30T08:18:05.107Z</updated>
    
    <content type="html"><![CDATA[<h4 id="小程序的框架系统分为两部分：视图层（View）和逻辑层-App-Service"><a href="#小程序的框架系统分为两部分：视图层（View）和逻辑层-App-Service" class="headerlink" title="小程序的框架系统分为两部分：视图层（View）和逻辑层(App Service)."></a>小程序的框架系统分为两部分：视图层（View）和逻辑层(App Service).</h4><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>1.创建之后自动生成4种文件：①json配置文件。    </p><p>​                            ②js：逻辑层文件    </p><p>​                            ③wxml。相当于html文件    </p><p>​                             ④wxss，相当于css样式<br>2.全局配置:app.json    </p><p>page(查看页面路径)、window(设置状态栏、导航栏、标题、窗口背景色）、tabBar(切换页面)、Debug(在控制台页面显示调试信息)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">eg:<span class="string">"tabBar"</span>: &#123;</span><br><span class="line">    <span class="string">"color"</span>: <span class="string">"black"</span>,<span class="comment">//tab 上的文字默认颜色</span></span><br><span class="line">    <span class="string">"selectedColor"</span>:<span class="string">"blue"</span>,<span class="comment">//tab 上的文字选中时的颜色</span></span><br><span class="line">    <span class="string">"backgroundColor"</span>:<span class="string">"#fff"</span>,<span class="comment">//tab 的背景色</span></span><br><span class="line">    <span class="string">"list"</span>:[&#123;</span><br><span class="line">  <span class="string">"pagePath"</span>:<span class="string">"pages/index/index"</span>,      <span class="comment">//页面路径，必须在 pages 中先定义</span></span><br><span class="line">  <span class="string">"text"</span>:<span class="string">"首页"</span>,   <span class="comment">//tab 上按钮文字</span></span><br><span class="line">      <span class="string">"iconPath"</span>:<span class="string">"images/f1.png"</span>,   <span class="comment">//图片路径</span></span><br><span class="line">      <span class="string">"selectedIconPath"</span>:<span class="string">"images/f1_on.png"</span> <span class="comment">//选中时的图片路径</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="string">"pagePath"</span>: <span class="string">"pages/statistic/statisitic"</span>,</span><br><span class="line">      <span class="string">"text"</span>: <span class="string">"练习1"</span>,</span><br><span class="line">      <span class="string">"iconPath"</span>:<span class="string">"images/f3.png"</span>,</span><br><span class="line">      <span class="string">"selectedIconPath"</span>:<span class="string">"images/f3_on.png"</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="string">"pagePath"</span>: <span class="string">"pages/test/test"</span>,</span><br><span class="line">      <span class="string">"text"</span>: <span class="string">"练习2"</span>,</span><br><span class="line">      <span class="string">"iconPath"</span>: <span class="string">"images/loves.png"</span>,</span><br><span class="line">      <span class="string">"selectedIconPath"</span>: <span class="string">"images/lover.png"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.页面配置：json文件夹中配置会覆盖app.json中window相同的配置项</p><hr><h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p>1.APP()函数—-注册下程序，接受一个Object参数，指定小程序的生命周回调等，必须在app.js中调用切只能调用一次。</p><p>Object参数：</p><p>  onLauch():生命周期回调–监听小程序初始化（全局只能触发一次）</p><p>  onShow:监听小程序显示，小程序启动时触发或后台进入前台显示时触发</p><p>  onHide():监听小程序隐藏，小程序从前台进入时触发</p><p>  onEroor:错误监听函数,页面发生脚本错误时触发</p><p>  onPageNotFound:页面不存在监听函数  ，打开页面不存在时触发</p><p>2.getApp(Object)：全局的 <code>getApp()</code> 函数可以用来获取到小程序 <code>App</code> 实例。</p><p>实例：var appInstance = getApp(){</p><p>​    console.log(appInstance.globaIData);</p><p>}</p><p>3.路由：在小程序中所有页面的路由全部由诳街进行管理。</p><p>  路由的方式有两种：1.调用API       2.使用组件</p><p>4.文件作用域：在 JavaScript 文件中声明的变量和函数只在该文件中有效；不同的文件中可以声明相同名字的变量和函数，不会互相影响。</p><p>5.模块化：可以将一些公共的代码抽离成为一个单独的 js 文件，作为一个模块。模块只有通过 <code>module.exports</code> 或者 <code>exports</code> 才能对外暴露接口。</p><hr><h2 id="视图层"><a href="#视图层" class="headerlink" title="视图层"></a>视图层</h2><h4 id="1-wxml-数据绑定、列表渲染、条件渲染、模板、事件、引用"><a href="#1-wxml-数据绑定、列表渲染、条件渲染、模板、事件、引用" class="headerlink" title="1.wxml:数据绑定、列表渲染、条件渲染、模板、事件、引用"></a>1.wxml:数据绑定、列表渲染、条件渲染、模板、事件、引用</h4><p>①数据绑定：  、 id=”item-“</p><p>②列表渲染wx:for</p><p>eg:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  for遍历九九乘法表  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">  1*1=1</span></span><br><span class="line"><span class="comment">  2*1=2 22=4 2*3=6</span></span><br><span class="line"><span class="comment">  3*1=3 32=6 3*3=9</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;[1,2,3,4,5,6,7,8,9]&#125;&#125;"</span> <span class="attr">wx:for-item</span>=<span class="string">"i"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;[1,2,3,4,5,6,7,8,9]&#125;&#125;"</span> <span class="attr">wx:for-item</span>=<span class="string">"j"</span>  <span class="attr">style</span>=<span class="string">"display:inline-block;width:20%;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;j &lt;= i&#125;&#125;"</span>&gt;</span></span><br><span class="line">         &#123;&#123;i&#125;&#125;&#123;&#123;j&#125;&#125;=&#123;&#123;ij&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意： 花括号和引号之间如果有空格，将最终被解析成为字符串</strong></p><p>③条件渲染:wx:if</p><p>eg:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wxml:<span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;id==1&#125;&#125;"</span>&gt;</span>第一条<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;id &gt; 4&#125;&#125;"</span>&gt;</span>大于4的条件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>=<span class="string">"&#123;&#123;id &gt; 7&#125;&#125;"</span>&gt;</span>大于7<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">js:data: &#123;</span><br><span class="line">      id:8, </span><br><span class="line">  &#125;</span><br><span class="line">----------------------------------------------------</span><br><span class="line"><span class="comment">&lt;!--  hidden在view中不生效，text有效  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">hidden</span>=<span class="string">"&#123;&#123;true&#125;&#125;"</span>&gt;</span>这是一段文本<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">"&#123;&#123;true&#125;&#125;"</span>&gt;</span>这是一段文本<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">----------------------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;true&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里的block标签名可以随便起<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>相当于一个控制属性<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意： block并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。</strong></p><p>④模板:template</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wxml: <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"obj"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>第一个对象：&#123;&#123;a&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>第二个对象：&#123;&#123;b&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;temname&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用模板 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"obj"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;a:1, b:2,temname:name&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"obj"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...obj,temname:name&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line">js:   data: &#123;</span><br><span class="line">      obj:&#123;</span><br><span class="line">        a: 1,</span><br><span class="line">        b: 3</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>⑤事件:绑定事件: bindtap  |  停止事件冒泡：catchtap</p><p>​        事件中的事件对象：target：事件触发的源头   currentTarget:事件绑定的源头    dateset:事件源组件上由data-开头的自定义属性组成的集合</p><p><strong>更多事件可以查看文档，这里就不一一进行说明了</strong></p><p>⑥引用:</p><p>  import:只会引用目标文件夹中的template</p><p>  inclde:只会引用除template外的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"item.wxml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"item"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;name:'一颗小白菜'&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">src</span>=<span class="string">"item.wxml"</span> /&gt;</span></span><br><span class="line">item.whtml:</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>我是item.wxml<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>我是item.wxml中的&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-wxss-模块、变量、运算符、语句、数据类型、基础类库"><a href="#2-wxss-模块、变量、运算符、语句、数据类型、基础类库" class="headerlink" title="2.wxss: 模块、变量、运算符、语句、数据类型、基础类库"></a>2.wxss: 模块、变量、运算符、语句、数据类型、基础类库</h4><h6 id="尺寸单位：rpx-eg-在-iPhone6-上，屏幕宽度为375px，共有750个物理像素，则750rpx-375px-750物理像素，1rpx-0-5px-1物理像素。"><a href="#尺寸单位：rpx-eg-在-iPhone6-上，屏幕宽度为375px，共有750个物理像素，则750rpx-375px-750物理像素，1rpx-0-5px-1物理像素。" class="headerlink" title="尺寸单位：rpx   eg:在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px =                  750物理像素，1rpx = 0.5px = 1物理像素。"></a>尺寸单位：rpx   eg:在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px =                  750物理像素，1rpx = 0.5px = 1物理像素。</h6><p>样式导入：@import       <strong>必须放在css文件最顶部</strong></p><p>内联样式：<view style="color:;"></view></p><p>选择器：.class、#id、element、element, element、::after、::before</p><p>全局样式与局部样式：定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器。</p><hr><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h4 id="1-视图容器：view、scroll-view-可滚动视图区域-、swiper-滑块视图容器-、movable-area-可移动区域-、cover-view"><a href="#1-视图容器：view、scroll-view-可滚动视图区域-、swiper-滑块视图容器-、movable-area-可移动区域-、cover-view" class="headerlink" title="1.视图容器：view、scroll-view(可滚动视图区域)、swiper(滑块视图容器)、movable-area(可移动区域)、cover-view"></a>1.视图容器：view、scroll-view(可滚动视图区域)、swiper(滑块视图容器)、movable-area(可移动区域)、cover-view</h4><h4 id="2-导航：navigator"><a href="#2-导航：navigator" class="headerlink" title="2.导航：navigator"></a>2.导航：navigator</h4><h4 id="3-媒体组件：audio、video、image、camera、live-player-实时音视频播放-、live-pusher-实时音频录制"><a href="#3-媒体组件：audio、video、image、camera、live-player-实时音视频播放-、live-pusher-实时音频录制" class="headerlink" title="3.媒体组件：audio、video、image、camera、live-player(实时音视频播放)、live-pusher(实时音频录制)"></a>3.媒体组件：audio、video、image、camera、live-player(实时音视频播放)、live-pusher(实时音频录制)</h4><h4 id="4-开放能力：open-data-用于展示微信开放的数据-、web-view-用来承载网页的容器，会自动铺满整个小程序页面-、ad-广告-、official-account-用户扫码打开小程序时，开发者可在小程序内配置公众号关注组件，方便用户快捷关注公众号，可嵌套在原生组件内"><a href="#4-开放能力：open-data-用于展示微信开放的数据-、web-view-用来承载网页的容器，会自动铺满整个小程序页面-、ad-广告-、official-account-用户扫码打开小程序时，开发者可在小程序内配置公众号关注组件，方便用户快捷关注公众号，可嵌套在原生组件内" class="headerlink" title="4.开放能力：open-data(用于展示微信开放的数据)、web-view(用来承载网页的容器，会自动铺满整个小程序页面)、ad(广告)、official-account(用户扫码打开小程序时，开发者可在小程序内配置公众号关注组件，方便用户快捷关注公众号，可嵌套在原生组件内)"></a>4.开放能力：open-data(用于展示微信开放的数据)、web-view(用来承载网页的容器，会自动铺满整个小程序页面)、ad(广告)、official-account(用户扫码打开小程序时，开发者可在小程序内配置公众号关注组件，方便用户快捷关注公众号，可嵌套在原生组件内)</h4><h4 id="5-地图：map-画布-canvas"><a href="#5-地图：map-画布-canvas" class="headerlink" title="5.地图：map     画布:canvas"></a>5.地图：map     画布:canvas</h4><h4 id="小程序的框架系统分为两部分：视图层（View）和逻辑层-App-Service-1"><a href="#小程序的框架系统分为两部分：视图层（View）和逻辑层-App-Service-1" class="headerlink" title="小程序的框架系统分为两部分：视图层（View）和逻辑层(App Service)."></a>小程序的框架系统分为两部分：视图层（View）和逻辑层(App Service).</h4><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>1.创建之后自动生成4种文件：①json配置文件。    </p><p>​                            ②js：逻辑层文件    </p><p>​                            ③wxml。相当于html文件    </p><p>​                             ④wxss，相当于css样式<br>2.全局配置:app.json    </p><p>page(查看页面路径)、window(设置状态栏、导航栏、标题、窗口背景色）、tabBar(切换页面)、Debug(在控制台页面显示调试信息)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">eg:<span class="string">"tabBar"</span>: &#123;</span><br><span class="line">    <span class="string">"color"</span>: <span class="string">"black"</span>,<span class="comment">//tab 上的文字默认颜色</span></span><br><span class="line">    <span class="string">"selectedColor"</span>:<span class="string">"blue"</span>,<span class="comment">//tab 上的文字选中时的颜色</span></span><br><span class="line">    <span class="string">"backgroundColor"</span>:<span class="string">"#fff"</span>,<span class="comment">//tab 的背景色</span></span><br><span class="line">    <span class="string">"list"</span>:[&#123;</span><br><span class="line">  <span class="string">"pagePath"</span>:<span class="string">"pages/index/index"</span>,      <span class="comment">//页面路径，必须在 pages 中先定义</span></span><br><span class="line">  <span class="string">"text"</span>:<span class="string">"首页"</span>,   <span class="comment">//tab 上按钮文字</span></span><br><span class="line">      <span class="string">"iconPath"</span>:<span class="string">"images/f1.png"</span>,   <span class="comment">//图片路径</span></span><br><span class="line">      <span class="string">"selectedIconPath"</span>:<span class="string">"images/f1_on.png"</span> <span class="comment">//选中时的图片路径</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="string">"pagePath"</span>: <span class="string">"pages/statistic/statisitic"</span>,</span><br><span class="line">      <span class="string">"text"</span>: <span class="string">"练习1"</span>,</span><br><span class="line">      <span class="string">"iconPath"</span>:<span class="string">"images/f3.png"</span>,</span><br><span class="line">      <span class="string">"selectedIconPath"</span>:<span class="string">"images/f3_on.png"</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="string">"pagePath"</span>: <span class="string">"pages/test/test"</span>,</span><br><span class="line">      <span class="string">"text"</span>: <span class="string">"练习2"</span>,</span><br><span class="line">      <span class="string">"iconPath"</span>: <span class="string">"images/loves.png"</span>,</span><br><span class="line">      <span class="string">"selectedIconPath"</span>: <span class="string">"images/lover.png"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.页面配置：json文件夹中配置会覆盖app.json中window相同的配置项</p><hr><h2 id="逻辑-1"><a href="#逻辑-1" class="headerlink" title="逻辑"></a>逻辑</h2><p>1.APP()函数—-注册下程序，接受一个Object参数，指定小程序的生命周回调等，必须在app.js中调用切只能调用一次。</p><p>Object参数：</p><p>  onLauch():生命周期回调–监听小程序初始化（全局只能触发一次）</p><p>  onShow:监听小程序显示，小程序启动时触发或后台进入前台显示时触发</p><p>  onHide():监听小程序隐藏，小程序从前台进入时触发</p><p>  onEroor:错误监听函数,页面发生脚本错误时触发</p><p>  onPageNotFound:页面不存在监听函数  ，打开页面不存在时触发</p><p>2.getApp(Object)：全局的 <code>getApp()</code> 函数可以用来获取到小程序 <code>App</code> 实例。</p><p>实例：var appInstance = getApp(){</p><p>​    console.log(appInstance.globaIData);</p><p>}</p><p>3.路由：在小程序中所有页面的路由全部由诳街进行管理。</p><p>  路由的方式有两种：1.调用API       2.使用组件</p><p>4.文件作用域：在 JavaScript 文件中声明的变量和函数只在该文件中有效；不同的文件中可以声明相同名字的变量和函数，不会互相影响。</p><p>5.模块化：可以将一些公共的代码抽离成为一个单独的 js 文件，作为一个模块。模块只有通过 <code>module.exports</code> 或者 <code>exports</code> 才能对外暴露接口。</p><hr><h2 id="视图层-1"><a href="#视图层-1" class="headerlink" title="视图层"></a>视图层</h2><h4 id="1-wxml-数据绑定、列表渲染、条件渲染、模板、事件、引用-1"><a href="#1-wxml-数据绑定、列表渲染、条件渲染、模板、事件、引用-1" class="headerlink" title="1.wxml:数据绑定、列表渲染、条件渲染、模板、事件、引用"></a>1.wxml:数据绑定、列表渲染、条件渲染、模板、事件、引用</h4><p>①数据绑定：  、 id=”item-“</p><p>②列表渲染wx:for</p><p>eg:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  for遍历九九乘法表  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">  1*1=1</span></span><br><span class="line"><span class="comment">  2*1=2 22=4 2*3=6</span></span><br><span class="line"><span class="comment">  3*1=3 32=6 3*3=9</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;[1,2,3,4,5,6,7,8,9]&#125;&#125;"</span> <span class="attr">wx:for-item</span>=<span class="string">"i"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;[1,2,3,4,5,6,7,8,9]&#125;&#125;"</span> <span class="attr">wx:for-item</span>=<span class="string">"j"</span>  <span class="attr">style</span>=<span class="string">"display:inline-block;width:20%;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;j &lt;= i&#125;&#125;"</span>&gt;</span></span><br><span class="line">         &#123;&#123;i&#125;&#125;&#123;&#123;j&#125;&#125;=&#123;&#123;ij&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意： 花括号和引号之间如果有空格，将最终被解析成为字符串</strong></p><p>③条件渲染:wx:if</p><p>eg:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wxml:<span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;id==1&#125;&#125;"</span>&gt;</span>第一条<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;id &gt; 4&#125;&#125;"</span>&gt;</span>大于4的条件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>=<span class="string">"&#123;&#123;id &gt; 7&#125;&#125;"</span>&gt;</span>大于7<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">js:data: &#123;</span><br><span class="line">      id:8, </span><br><span class="line">  &#125;</span><br><span class="line">----------------------------------------------------</span><br><span class="line"><span class="comment">&lt;!--  hidden在view中不生效，text有效  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">hidden</span>=<span class="string">"&#123;&#123;true&#125;&#125;"</span>&gt;</span>这是一段文本<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">"&#123;&#123;true&#125;&#125;"</span>&gt;</span>这是一段文本<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">----------------------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;true&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里的block标签名可以随便起<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>相当于一个控制属性<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意： block并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。</strong></p><p>④模板:template</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wxml: <span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"obj"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>第一个对象：&#123;&#123;a&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>第二个对象：&#123;&#123;b&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;temname&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用模板 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"obj"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;a:1, b:2,temname:name&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"obj"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...obj,temname:name&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line">js:   data: &#123;</span><br><span class="line">      obj:&#123;</span><br><span class="line">        a: 1,</span><br><span class="line">        b: 3</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>⑤事件:绑定事件: bindtap  |  停止事件冒泡：catchtap</p><p>​        事件中的事件对象：target：事件触发的源头   currentTarget:事件绑定的源头    dateset:事件源组件上由data-开头的自定义属性组成的集合</p><p><strong>更多事件可以查看文档，这里就不一一进行说明了</strong></p><p>⑥引用:</p><p>  import:只会引用目标文件夹中的template</p><p>  inclde:只会引用除template外的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"item.wxml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"item"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;name:'一颗小白菜'&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">src</span>=<span class="string">"item.wxml"</span> /&gt;</span></span><br><span class="line">item.whtml:</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>我是item.wxml<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>我是item.wxml中的&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-wxss-模块、变量、运算符、语句、数据类型、基础类库-1"><a href="#2-wxss-模块、变量、运算符、语句、数据类型、基础类库-1" class="headerlink" title="2.wxss: 模块、变量、运算符、语句、数据类型、基础类库"></a>2.wxss: 模块、变量、运算符、语句、数据类型、基础类库</h4><h6 id="尺寸单位：rpx-eg-在-iPhone6-上，屏幕宽度为375px，共有750个物理像素，则750rpx-375px-750物理像素，1rpx-0-5px-1物理像素。-1"><a href="#尺寸单位：rpx-eg-在-iPhone6-上，屏幕宽度为375px，共有750个物理像素，则750rpx-375px-750物理像素，1rpx-0-5px-1物理像素。-1" class="headerlink" title="尺寸单位：rpx   eg:在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px =                  750物理像素，1rpx = 0.5px = 1物理像素。"></a>尺寸单位：rpx   eg:在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px =                  750物理像素，1rpx = 0.5px = 1物理像素。</h6><p>样式导入：@import       <strong>必须放在css文件最顶部</strong></p><p>内联样式：<view style="color:;"></view></p><p>选择器：.class、#id、element、element, element、::after、::before</p><p>全局样式与局部样式：定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器。</p><hr><h2 id="组件-1"><a href="#组件-1" class="headerlink" title="组件"></a>组件</h2><h4 id="1-视图容器：view、scroll-view-可滚动视图区域-、swiper-滑块视图容器-、movable-area-可移动区域-、cover-view-1"><a href="#1-视图容器：view、scroll-view-可滚动视图区域-、swiper-滑块视图容器-、movable-area-可移动区域-、cover-view-1" class="headerlink" title="1.视图容器：view、scroll-view(可滚动视图区域)、swiper(滑块视图容器)、movable-area(可移动区域)、cover-view"></a>1.视图容器：view、scroll-view(可滚动视图区域)、swiper(滑块视图容器)、movable-area(可移动区域)、cover-view</h4><h4 id="2-导航：navigator-1"><a href="#2-导航：navigator-1" class="headerlink" title="2.导航：navigator"></a>2.导航：navigator</h4><h4 id="3-媒体组件：audio、video、image、camera、live-player-实时音视频播放-、live-pusher-实时音频录制-1"><a href="#3-媒体组件：audio、video、image、camera、live-player-实时音视频播放-、live-pusher-实时音频录制-1" class="headerlink" title="3.媒体组件：audio、video、image、camera、live-player(实时音视频播放)、live-pusher(实时音频录制)"></a>3.媒体组件：audio、video、image、camera、live-player(实时音视频播放)、live-pusher(实时音频录制)</h4><h4 id="4-开放能力：open-data-用于展示微信开放的数据-、web-view-用来承载网页的容器，会自动铺满整个小程序页面-、ad-广告-、official-account-用户扫码打开小程序时，开发者可在小程序内配置公众号关注组件，方便用户快捷关注公众号，可嵌套在原生组件内-1"><a href="#4-开放能力：open-data-用于展示微信开放的数据-、web-view-用来承载网页的容器，会自动铺满整个小程序页面-、ad-广告-、official-account-用户扫码打开小程序时，开发者可在小程序内配置公众号关注组件，方便用户快捷关注公众号，可嵌套在原生组件内-1" class="headerlink" title="4.开放能力：open-data(用于展示微信开放的数据)、web-view(用来承载网页的容器，会自动铺满整个小程序页面)、ad(广告)、official-account(用户扫码打开小程序时，开发者可在小程序内配置公众号关注组件，方便用户快捷关注公众号，可嵌套在原生组件内)"></a>4.开放能力：open-data(用于展示微信开放的数据)、web-view(用来承载网页的容器，会自动铺满整个小程序页面)、ad(广告)、official-account(用户扫码打开小程序时，开发者可在小程序内配置公众号关注组件，方便用户快捷关注公众号，可嵌套在原生组件内)</h4><h4 id="5-地图：map-画布-canvas-1"><a href="#5-地图：map-画布-canvas-1" class="headerlink" title="5.地图：map     画布:canvas"></a>5.地图：map     画布:canvas</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;小程序的框架系统分为两部分：视图层（View）和逻辑层-App-Service&quot;&gt;&lt;a href=&quot;#小程序的框架系统分为两部分：视图层（View）和逻辑层-App-Service&quot; class=&quot;headerlink&quot; title=&quot;小程序的框架系统分为两部分：
      
    
    </summary>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端面试问题总结</title>
    <link href="http://yoursite.com/2018/10/25/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/10/25/前端面试问题总结/</id>
    <published>2018-10-25T06:50:23.000Z</published>
    <updated>2018-10-25T06:53:31.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/HTML.md" target="_blank" rel="noopener">HTML</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/CSS.md" target="_blank" rel="noopener">CSS</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/JavaScript.md" target="_blank" rel="noopener">JavaScript</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/jQuery.md" target="_blank" rel="noopener">jQuery</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/Ajax.md" target="_blank" rel="noopener">Ajax</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/HTTP.md" target="_blank" rel="noopener">HTTP</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/Front-end-frame-relative.md" target="_blank" rel="noopener">Front-end-frame-relative</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/Json-XML.md" target="_blank" rel="noopener">Json-XML</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/localStorage.md" target="_blank" rel="noopener">localStorage</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/mobile-terminal.md" target="_blank" rel="noopener">mobile-terminal</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/Modules.md" target="_blank" rel="noopener">Modules</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/performance-optimization.md" target="_blank" rel="noopener">performance-optimization</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/PS.md" target="_blank" rel="noopener">PS</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/SEO.md" target="_blank" rel="noopener">SEO</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/ES6.md" target="_blank" rel="noopener">ES6</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/cross-domain.md" target="_blank" rel="noopener">cross-domain</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/cookie.md" target="_blank" rel="noopener">cookie</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/MVC.md" target="_blank" rel="noopener">MVC</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/Git.md" target="_blank" rel="noopener">Git</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/data-structure.md" target="_blank" rel="noopener">data-structure</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/dataBase.md" target="_blank" rel="noopener">dataBase</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/Handwritten-code.md" target="_blank" rel="noopener">Handwritten-code</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/computer-basic-knowledge.md" target="_blank" rel="noopener">computer-basic-knowledge</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/other.md" target="_blank" rel="noopener">other</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/comprehensive.md" target="_blank" rel="noopener">comprehensive</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/vue.md" target="_blank" rel="noopener">vue</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/react.md" target="_blank" rel="noopener">react</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/MVVM.md" target="_blank" rel="noopener">MVVM</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/%E6%B5%8F%E8%A7%88%E5%99%A8.md" target="_blank" rel="noopener">浏览器</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/%E6%80%A7%E8%83%BD.md" target="_blank" rel="noopener">性能</a></li></ul><h2 id="综合版本"><a href="#综合版本" class="headerlink" title="综合版本"></a><a href="https://github.com/flymejie/FE-Interview-Questions#%E7%BB%BC%E5%90%88%E7%89%88%E6%9C%AC" target="_blank" rel="noopener"></a>综合版本</h2><ul><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/Interview-Questions/Front-end-Developer-Questions%5Bquestion-version%5D.md" target="_blank" rel="noopener">Interview-Questions</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/Interview-Questions/Front-end-Developer-Questions%5Bquestion-and-answer-version%5D.md" target="_blank" rel="noopener">Front-end-Developer-Questions[question-and-answer-versio]</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flymejie/FE-Interview-Questions/blob
      
    
    </summary>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>BlueLake博客主题的安装及详细配置</title>
    <link href="http://yoursite.com/2018/10/25/BlurLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/10/25/BlurLake博客主题的安装及详细配置/</id>
    <published>2018-10-25T03:23:02.000Z</published>
    <updated>2018-10-25T05:30:51.827Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。</p><p>在阅读本文之前，假定您已经成功安装了<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><blockquote><p>需要特别注意的是Hexo有两个<code>_config.yml</code>配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为<strong>根_config.yml</strong>；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为<strong>主题_config.yml</strong>。</p></blockquote><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>您可以直接到<a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="noopener">BlueLake发布页</a>下载，然后解压拷贝到<code>themes</code>目录下，修改配置即可。</p><p>您可以直接到<a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="noopener">BlueLake发布页</a>下载，然后解压拷贝到<code>themes</code>目录下，修改配置即可。<br>不过我还是推荐使用<code>GIT</code>来checkout代码，之后也可以通过<code>git pull</code>来快速更新。</p><h4 id="1-1-安装主题"><a href="#1-1-安装主题" class="headerlink" title="1.1 安装主题"></a>1.1 安装主题</h4><p>在根目录下打开终端窗口：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git bash</span><br><span class="line">$ git <span class="keyword">clone</span> <span class="title">https</span>://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake</span><br></pre></td></tr></table></figure><h4 id="1-2-安装主题渲染器"><a href="#1-2-安装主题渲染器" class="headerlink" title="1.2 安装主题渲染器"></a>1.2 安装主题渲染器</h4><p>BlueLake是基于<code>jade</code>和<code>stylus</code>写的，所以需要安装<code>hexo-renderer-jade</code>和<code>hexo-renderer-stylus</code>来渲染。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">bash</span></span><br><span class="line"><span class="keyword">$ </span>npm <span class="keyword">install </span>hexo-renderer-<span class="keyword">jade@0.3.0 </span>--save</span><br><span class="line">$ npm <span class="keyword">install </span>hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h4 id="1-3-启用主题"><a href="#1-3-启用主题" class="headerlink" title="1.3 启用主题"></a>1.3 启用主题</h4><p>打开<code>根_config.yml</code>配置文件，找到theme字段，将其值改为<code>BlueLake</code>(先确认主题文件夹名称是否为BlueLake)。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">根_config<span class="selector-class">.yml_config</span><span class="selector-class">.yml</span></span><br><span class="line">theme: BlueLake</span><br></pre></td></tr></table></figure><h4 id="1-4-验证"><a href="#1-4-验证" class="headerlink" title="1.4 验证"></a>1.4 验证</h4><p>首先启动 Hexo 本地站点，并开启调试模式：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">bash</span></span><br><span class="line"><span class="keyword">$ </span>hexo s --<span class="built_in">debug</span></span><br></pre></td></tr></table></figure><p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：<code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></p><p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：<code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code><br>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p><h4 id="1-5-更新主题"><a href="#1-5-更新主题" class="headerlink" title="1.5 更新主题"></a>1.5 更新主题</h4><p>今后若主题添加了新功能正是您需要的，您可以直接<code>git pull</code>来更新主题。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">bash</span></span><br><span class="line"><span class="keyword">cd </span>themes/<span class="keyword">BlueLake</span></span><br><span class="line"><span class="keyword">git </span>pull</span><br></pre></td></tr></table></figure><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><h4 id="2-1-配置网站头部显示文字"><a href="#2-1-配置网站头部显示文字" class="headerlink" title="2.1 配置网站头部显示文字"></a>2.1 配置网站头部显示文字</h4><p>打开<code>根_config.yml</code>，找到：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">根_config.yml_config.yml</span><br><span class="line"><span class="symbol">title:</span> </span><br><span class="line"><span class="symbol">subtitle:</span> </span><br><span class="line"><span class="symbol">description:</span> </span><br><span class="line"><span class="symbol">author:</span></span><br></pre></td></tr></table></figure><p><code>title</code>和<code>subtitle</code>分别是网站主标题和副标题，会显示在网站头部；<code>description</code>在网站界面不会显示，内容会加入网站源码的<code>meta</code>标签中，主要用于SEO；<code>author</code>就填写网站所有者的名字，会在网站底部的<code>Copyright</code>处有所显示。</p><h4 id="2-2-设置语言"><a href="#2-2-设置语言" class="headerlink" title="2.2 设置语言"></a>2.2 设置语言</h4><p>该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在<code>根_config.yml</code>配置如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">根_config<span class="selector-class">.yml_config</span><span class="selector-class">.yml</span></span><br><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure><h4 id="2-3-设置菜单"><a href="#2-3-设置菜单" class="headerlink" title="2.3 设置菜单"></a>2.3 设置菜单</h4><p>打开<code>主题_config.yml</code>，找到：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">主题_config.ymlthemes/BlueLake/_config.yml</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">home</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-home</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">archives/</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment"># - page: about</span></span><br><span class="line">  <span class="comment">#   directory: about/</span></span><br><span class="line">  <span class="comment">#   icon: fa-user</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">rss</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-rss</span></span><br></pre></td></tr></table></figure><p>主题默认是展示四个菜单，即<code>主页home</code>，<code>归档archive</code>，<code>关于about</code>，<code>订阅RSS</code>；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。</p><p>主题默认是展示四个菜单，即<code>主页home</code>，<code>归档archive</code>，<code>关于about</code>，<code>订阅RSS</code>；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。<br>每个页面底部的<code>footer</code>中<code>联系博主</code>的三个图标分别是<code>邮箱</code>，<code>微博主页链接地址</code>，<code>GitHUb个人页链接地址</code>，直接使用<code>主题_config.yml</code>中<code>about页面</code>的配置，若不需要about页面，只需要如下配置就好：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">主题_config.ymlthemes/BlueLake/_config.yml</span><br><span class="line"><span class="meta"># About page </span></span><br><span class="line"><span class="symbol">about:</span></span><br><span class="line"><span class="symbol">  email:</span> <span class="meta">## 个人邮箱 </span></span><br><span class="line"><span class="symbol">  weibo_url:</span> <span class="meta">## 微博主页链接地址</span></span><br><span class="line"><span class="symbol">  github_url:</span> <span class="meta">## github主页链接地址</span></span><br></pre></td></tr></table></figure><h5 id="2-3-1-添加about页"><a href="#2-3-1-添加about页" class="headerlink" title="2.3.1 添加about页"></a>2.3.1 添加about页</h5><p>此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git bash</span><br><span class="line">$ hexo <span class="keyword">new</span> <span class="type">page</span> <span class="string">'about'</span></span><br></pre></td></tr></table></figure><p>打开<code>主题_config.yml</code>，补全关于我页面的详细信息：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">主题_config.ymlthemes/BlueLake/_config.yml</span><br><span class="line"><span class="meta"># About page </span></span><br><span class="line"><span class="symbol">about:</span></span><br><span class="line"><span class="symbol">  photo_url:</span> <span class="meta">## 头像的链接地址</span></span><br><span class="line"><span class="symbol">  email:</span> <span class="meta">## 个人邮箱 </span></span><br><span class="line"><span class="symbol">  weibo_url:</span> <span class="meta">## 微博主页链接地址</span></span><br><span class="line"><span class="symbol">  weibo_name:</span> <span class="meta">## 微博用户名 </span></span><br><span class="line"><span class="symbol">  github_url:</span> <span class="meta">## github主页链接地址</span></span><br><span class="line"><span class="symbol">  github_name:</span> <span class="meta">## github用户名</span></span><br></pre></td></tr></table></figure><p>当然您也可以自定义重新布局about页面，只需要修改<code>layout/page.jade</code>模板就好。</p><h5 id="2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件"><a href="#2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件" class="headerlink" title="2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件"></a>2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件</h5><p>在根目录下打开命令行窗口：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git bash</span><br><span class="line">$ npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span><br><span class="line">$ npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span><br><span class="line">$ npm <span class="keyword">install</span> hexo-generator-baidu-sitemap <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>添加<code>主题_config.yml</code>配置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">主题_config.ymlthemes/BlueLake/_config.yml</span><br><span class="line"><span class="symbol">Plugins:</span></span><br><span class="line">  hexo-generator-feed</span><br><span class="line">  hexo-generator-sitemap</span><br><span class="line">  hexo-generator-baidu-sitemap</span><br><span class="line"></span><br><span class="line"><span class="symbol">feed:</span></span><br><span class="line"><span class="symbol">  type:</span> atom</span><br><span class="line"><span class="symbol">  path:</span> atom.xml</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">sitemap:</span></span><br><span class="line"><span class="symbol">  path:</span> sitemap.xml</span><br><span class="line"><span class="symbol">baidusitemap:</span></span><br><span class="line"><span class="symbol">  path:</span> baidusitemap.xml</span><br></pre></td></tr></table></figure><h4 id="2-4-添加本地搜索"><a href="#2-4-添加本地搜索" class="headerlink" title="2.4 添加本地搜索"></a>2.4 添加本地搜索</h4><p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件<a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="noopener">hexo-generator-json-content</a>来创建JSON数据文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git bash</span><br><span class="line">$ npm <span class="keyword">install</span> hexo-generator-<span class="keyword">json</span>-<span class="keyword">content</span>@<span class="number">2.2</span><span class="number">.0</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>然后在<code>根_config.yml</code>添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">根_config.yml_config.yml</span></span><br><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line"><span class="attr">  meta:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  pages:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    title:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    date:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    path:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    raw:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    content:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    slug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    updated:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    permalink:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    excerpt:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    categories:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>最后在<code>主题_config.yml</code>添加配置：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主题_config.ymlthemes<span class="regexp">/BlueLake/</span>_config.yml</span><br><span class="line"><span class="string">local_search:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="2-5-修改站点图标"><a href="#2-5-修改站点图标" class="headerlink" title="2.5 修改站点图标"></a>2.5 修改站点图标</h4><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。</p><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为<strong> favicon.ico </strong>，请将其放入hexo目录的<code>source</code>文件夹，建议大小：32px X 32px。</p><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为<strong> favicon.ico </strong>，请将其放入hexo目录的<code>source</code>文件夹，建议大小：32px X 32px。<br>您需要为苹果设备添加网站徽标，请命名为<strong> apple-touch-icon.png </strong>的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。</p><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为<strong> favicon.ico </strong>，请将其放入hexo目录的<code>source</code>文件夹，建议大小：32px X 32px。<br>您需要为苹果设备添加网站徽标，请命名为<strong> apple-touch-icon.png </strong>的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。<br>(有很多网站都可以在线生成ico格式的图片。)</p><h4 id="2-6-添加站点关键字"><a href="#2-6-添加站点关键字" class="headerlink" title="2.6 添加站点关键字"></a>2.6 添加站点关键字</h4><p>请在hexo目录的<code>根_config.yml</code>中添加keywords字段，如：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">根_config.yml_config.yml</span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attribute">title</span>: Hexo</span><br><span class="line"><span class="attribute">subtitle</span>: 副标题</span><br><span class="line"><span class="attribute">description</span>: 网站简要描述,如：Charles·Zheng's blog.</span><br><span class="line"><span class="attribute">keywords</span>: 网站关键字, key, key1, key2, key3</span><br><span class="line"><span class="attribute">author</span>: Charles</span><br><span class="line"><span class="attribute">language</span>: zh-CN</span><br></pre></td></tr></table></figure><h4 id="2-7-其他配置"><a href="#2-7-其他配置" class="headerlink" title="2.7 其他配置"></a>2.7 其他配置</h4><p><code>主题_config.yml</code>的其他配置</p><ol><li><code>show_category_count</code>——是否显示分类下的文章数。</li><li><code>widgets_on_small_screens</code>——是否在小屏显示侧边栏，若<code>true</code>,则侧边栏挂件将显示在底部。主题_config.yml<a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a><code>show_category_count: true widgets_on_small_screens: true</code></li></ol><h3 id="3-集成第三方服务"><a href="#3-集成第三方服务" class="headerlink" title="3.集成第三方服务"></a>3.集成第三方服务</h3><h4 id="3-1-添加评论"><a href="#3-1-添加评论" class="headerlink" title="3.1 添加评论"></a>3.1 添加评论</h4><p>目前主题集成六种第三方评论，分别是<a href="http://duoshuo.com/" target="_blank" rel="noopener">多说评论</a>、<a href="https://disqus.com/" target="_blank" rel="noopener">Disqus评论</a>、<a href="https://livere.com/" target="_blank" rel="noopener">来必力评论</a>、<a href="http://www.uyan.cc/" target="_blank" rel="noopener">友言评论</a>、<a href="https://gentie.163.com/info.html" target="_blank" rel="noopener">网易云跟帖评论</a>、<a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">畅言评论</a>，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前<code>网易云跟帖</code>和<code>畅言</code>还不错。</p><ol><li>注册并获得代码。<ul><li>若使用<a href="http://duoshuo.com/" target="_blank" rel="noopener">多说评论</a>，注册多说后获得short_name。</li><li>若使用<a href="https://disqus.com/" target="_blank" rel="noopener">Disqus评论</a>，注册Disqus后获得short_name。</li><li>若使用<a href="https://livere.com/" target="_blank" rel="noopener">来必力评论</a>，注册来必力,获得data-uid。</li><li>若使用<a href="http://www.uyan.cc/" target="_blank" rel="noopener">友言评论</a>，注册友言,获得uid。</li><li>若使用<a href="https://gentie.163.com/info.html" target="_blank" rel="noopener">网易云跟帖评论</a>，注册网易云跟帖,获得productKey。</li><li>若使用<a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">畅言评论</a>，注册畅言，获得appid，appkey。</li></ul></li><li>配置<code>主题_config.yml</code>：主题_config.yml<a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a><code>#Cmmentscomment:  duoshuo: ## duoshuo_shortname  disqus: ## disqus_shortname  livere: ## 来必力(data-uid)  uyan: ## 友言(uid)  cloudTie: ## 网易云跟帖(productKey)  changyan: ## 畅言需在下方配置两个参数，此处不填。    appid: ## 畅言(appid)    appkey: ##畅言(appkey)</code></li></ol><h4 id="3-2-百度统计"><a href="#3-2-百度统计" class="headerlink" title="3.2 百度统计"></a>3.2 百度统计</h4><ol><li>登录<a href="http://tongji.baidu.com/" target="_blank" rel="noopener">百度统计</a>，定位到站点的代码获取页面。</li><li>复制<code>//hm.baidu.com/hm.js?</code>后面那串统计脚本id(假设为：8006843039519956000)</li><li>配置<code>主题_config.yml</code>:主题_config.yml<a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a><code>baidu_analytics: 8006843039519956000</code></li></ol><blockquote><p>注意： <code>baidu_analytics</code>不是你的百度<code>id</code>或者百度统计<code>id</code></p><p>注意： <code>baidu_analytics</code>不是你的百度<code>id</code>或者百度统计<code>id</code><br>如若使用谷歌统计，配置方法与百度统计类似。</p></blockquote><h4 id="3-3-卜算子阅读次数统计"><a href="#3-3-卜算子阅读次数统计" class="headerlink" title="3.3 卜算子阅读次数统计"></a>3.3 卜算子阅读次数统计</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主题_config.ymlthemes<span class="regexp">/BlueLake/</span>_config.yml</span><br><span class="line"><span class="string">busuanzi:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>若设置为<code>true</code>将计算文章的阅读量(Hits)，并显示在文章标题下的<code>小手图标</code>旁。</p><h4 id="3-4-微博秀"><a href="#3-4-微博秀" class="headerlink" title="3.4 微博秀"></a>3.4 微博秀</h4><p>微博秀挂件的代码放在<code>layout/_widget/weibo.jade</code>下，需要您去<a href="http://open.weibo.com/" target="_blank" rel="noopener">微博开放平台</a>获取您自己的微博秀代码来替换。</p><ol><li>登录<a href="http://open.weibo.com/" target="_blank" rel="noopener">微博开放平台</a>，选择微博秀。</li><li>为了与主题风格统一，作如下配置<ul><li>基础设置：高<code>400px</code>；勾选宽度自适应；颜色选择<code>白色</code>；</li><li>样式设置：主字色<code>#333</code>；链接色<code>#40759b</code>；鼠标悬停色<code>#f7f8f8</code>；</li><li>模块设置：去掉<code>标题</code>、<code>边框</code>、<code>粉丝</code>的勾选框，只留<code>微博</code>。</li></ul></li><li>复制代码里<code>src=&quot;&quot;</code>里引号包裹的内容，替换到<code>layout/_widget/weibo.jade</code>weibo.jade<a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/layout/_widget/weibo.jade" target="_blank" rel="noopener">layout/_widget/weibo.jade</a><code>.widget  .widget-title    i(class=&#39;fa fa-weibo&#39;)= &#39; &#39; + __(&#39;新浪微博&#39;)  iframe(width=&quot;100%&quot;,height=&quot;400&quot;,class=&quot;share_self&quot;,frameborder=&quot;0&quot;,scrolling=&quot;no&quot;,src=&quot;http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1&quot;)</code>这只是为了和主题的风格统一，当然您也可以自由随意发挥。注意：最主要是是要把<code>src</code>里<code>uid=</code>和<code>verifier=</code>后面的字段替换为您自己代码里的就好。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。&lt;/p&gt;
&lt;p&gt;在阅读本文之前，假定您已经成功安装了&lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>2分钟了解Markdown语法</title>
    <link href="http://yoursite.com/2018/10/24/2%E5%88%86%E9%92%9F%E4%BA%86%E8%A7%A3Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/10/24/2分钟了解Markdown语法/</id>
    <published>2018-10-24T06:36:32.000Z</published>
    <updated>2018-10-24T09:08:25.943Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown 就是一种轻量级的标记语言（Lightweight Markup Language），用人话说就是，普通的文本加上简单的排版或格式化语法（特殊标记），和 HTML，RTF 类似，只是 Markdown 的语法非常简单。Markdown 编写工具很多，在线的也有，很多编程开发工具都支持。需要知道，Markdown 语法没有标准，取决于 Markdown 渲染引擎，各个系统略微有差异。</p><p>下面直接介绍 Markdown 的基本语法：</p><h1 id="大小不同的标题-Heading"><a href="#大小不同的标题-Heading" class="headerlink" title="大小不同的标题 Heading"></a>大小不同的标题 Heading</h1><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 大小不同的标题 Heading</span><br><span class="line"></span><br><span class="line">## 标题 <span class="number">1</span> Heading <span class="number">1</span></span><br><span class="line"></span><br><span class="line">### 标题 <span class="number">2</span> Heading <span class="number">2</span></span><br><span class="line"></span><br><span class="line">#### 标题 <span class="number">3</span> Heading <span class="number">3</span></span><br><span class="line"></span><br><span class="line">##### 标题 <span class="number">4</span> Heading <span class="number">4</span></span><br><span class="line"></span><br><span class="line">###### 标题 <span class="number">5</span> Heading <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="标题-1-Heading-1"><a href="#标题-1-Heading-1" class="headerlink" title="标题 1 Heading 1"></a>标题 1 Heading 1</h2><h3 id="标题-2-Heading-2"><a href="#标题-2-Heading-2" class="headerlink" title="标题 2 Heading 2"></a>标题 2 Heading 2</h3><h4 id="标题-3-Heading-3"><a href="#标题-3-Heading-3" class="headerlink" title="标题 3 Heading 3"></a>标题 3 Heading 3</h4><h5 id="标题-4-Heading-4"><a href="#标题-4-Heading-4" class="headerlink" title="标题 4 Heading 4"></a>标题 4 Heading 4</h5><h6 id="标题-5-Heading-5"><a href="#标题-5-Heading-5" class="headerlink" title="标题 5 Heading 5"></a>标题 5 Heading 5</h6><h1 id="黑体字-strong"><a href="#黑体字-strong" class="headerlink" title="黑体字 strong"></a>黑体字 strong</h1><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是个*<span class="strong">*黑体字 strong*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">这也是个*</span><span class="strong">*黑体字 strong*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><p>这是个<strong>黑体字 strong</strong><br>这也是个<strong>黑体字 strong</strong></p><h1 id="斜体字-italic"><a href="#斜体字-italic" class="headerlink" title="斜体字 italic"></a>斜体字 italic</h1><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是个<span class="strong">*斜体字 italic*</span></span><br><span class="line">这也是个<span class="strong">*斜体字 italic*</span></span><br></pre></td></tr></table></figure><p>这是个<em>斜体字 italic</em><br>这也是个<em>斜体字 italic</em></p><h1 id="删除线-strikethrought"><a href="#删除线-strikethrought" class="headerlink" title="删除线 strikethrought"></a>删除线 strikethrought</h1><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~加一条删除线 strikethrought~~</span><br></pre></td></tr></table></figure><p><del>加一条删除线 strikethrought</del></p><h1 id="无序列表-unordered-list"><a href="#无序列表-unordered-list" class="headerlink" title="无序列表 unordered list"></a>无序列表 unordered list</h1><p>*，+，- 都可以表示无序列表。</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">   美国</span></span><br><span class="line"><span class="ruby">-   俄罗斯</span></span><br><span class="line"><span class="ruby">-   英国</span></span><br><span class="line"><span class="ruby">-   法国</span></span><br><span class="line"><span class="ruby">-   中国</span></span><br><span class="line"><span class="ruby">    -   北京</span></span><br><span class="line"><span class="ruby">    -   上海</span></span><br><span class="line"><span class="ruby">    -   广州</span></span><br></pre></td></tr></table></figure><ul><li><p>美国</p></li><li><p>俄罗斯</p></li><li><p>英国</p></li><li><p>法国</p></li><li><p>中国</p><p>中国<br>_ 北京</p><p>中国<br>_ 北京<br>_ 上海 * 广州</p></li></ul><h1 id="有序列表-ordered-list"><a href="#有序列表-ordered-list" class="headerlink" title="有序列表 ordered list"></a>有序列表 ordered list</h1><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 个</span><br><span class="line"><span class="number">2.</span> 十</span><br><span class="line"><span class="number">3.</span> 百</span><br><span class="line"><span class="number">4.</span> 千</span><br><span class="line"><span class="number">5.</span> 万</span><br><span class="line">    <span class="number">1.</span> 十万</span><br><span class="line">    <span class="number">2.</span> 百万</span><br><span class="line">    <span class="number">3.</span> 千万</span><br><span class="line"><span class="number">6.</span> 亿</span><br></pre></td></tr></table></figure><ol><li>个</li><li>十</li><li>百</li><li>千</li><li>万<ol><li>十万</li><li>百万</li><li>千万</li></ol></li><li>亿</li></ol><h1 id="水平分隔线-horizontal-rule"><a href="#水平分隔线-horizontal-rule" class="headerlink" title="水平分隔线 horizontal rule"></a>水平分隔线 horizontal rule</h1><p>三个<code>-</code>或者三个<code>_</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="链接-link"><a href="#链接-link" class="headerlink" title="链接 link"></a>链接 link</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">点击就去 Google</span>](<span class="link">https://www.google.com</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.google.com/" target="_blank" rel="noopener">点击就去 Google</a></p><h1 id="参考链接-ref-link"><a href="#参考链接-ref-link" class="headerlink" title="参考链接 ref link"></a>参考链接 ref link</h1><p>如果链接需要多次出现，可以定义链接，然后多次引用。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">点击去 Google 第一次</span>][<span class="symbol">goolge</span>]</span><br><span class="line">[<span class="string">点击去 Google 第二次</span>][<span class="symbol">goolge</span>]</span><br><span class="line">[<span class="symbol">Goolge</span>]:<span class="link">https://www.google.com</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.google.com(https://www.google.com/)" target="_blank" rel="noopener">点击去 Google 第一次</a> &gt; <a href="https://www.google.com(https://www.google.com/)" target="_blank" rel="noopener">点击去 Google 第二次</a></p><p><a href="https://www.google.com(https://www.google.com/)" target="_blank" rel="noopener">点击去 Google 第一次</a> &gt; <a href="https://www.google.com(https://www.google.com/)" target="_blank" rel="noopener">点击去 Google 第二次</a></p></blockquote><h1 id="图片-image"><a href="#图片-image" class="headerlink" title="图片 image"></a>图片 image</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">翠玉白菜图</span>](<span class="link">https://img.alicdn.com/imgextra/i4/0/T1bMbTFzlcXXXXXXXX_!!0-item_pic.jpg_50x50.jpg</span>)</span><br></pre></td></tr></table></figure><p><a href="https://img.alicdn.com/imgextra/i4/0/T1bMbTFzlcXXXXXXXX_!!0-item_pic.jpg_50x50.jpg" target="_blank" rel="noopener"><img src="https://img.alicdn.com/imgextra/i4/0/T1bMbTFzlcXXXXXXXX_!!0-item_pic.jpg_50x50.jpg" alt="翠玉白菜\"></a></p><h1 id="引用块-blockquote"><a href="#引用块-blockquote" class="headerlink" title="引用块 blockquote"></a>引用块 blockquote</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这是个引用块：小李他妈的飞刀</span></span><br></pre></td></tr></table></figure><blockquote><p>这是个引用块：小李他妈的飞刀</p></blockquote><h1 id="表格-table"><a href="#表格-table" class="headerlink" title="表格 table"></a>表格 table</h1><p><code>|</code> 控制分列，<code>-</code>控制分行，<code>:</code> 控制对齐方式，左右或居中。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> 职工号 </span>|<span class="string"> 姓名 </span>|<span class="string"> 年龄 </span>|</span><br><span class="line">|<span class="string"> :----: </span>|<span class="string"> :--- </span>|<span class="string"> :--: </span>|</span><br><span class="line">|<span class="string">   1    </span>|<span class="string"> 张三 </span>|<span class="string">  20  </span>|</span><br><span class="line">|<span class="string">   2    </span>|<span class="string"> 李四 </span>|<span class="string">  30  </span>|</span><br><span class="line">|<span class="string">   3    </span>|<span class="string"> 王二 </span>|<span class="string">  40  </span>|</span><br></pre></td></tr></table></figure><table><thead><tr><th>职工号</th><th>姓名</th><th>年龄</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>20</td></tr><tr><td>2</td><td>李四</td><td>30</td></tr><tr><td>3</td><td>王二</td><td>40</td></tr></tbody></table><h1 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h1><p>markdown 支持在特殊字符前面插入<code>\</code>，插入之后，将不再解析这些字符，而是原样输出。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这个不是<span class="symbol">\#</span> 标题</span><br><span class="line">这个不是<span class="symbol">\*</span><span class="symbol">\*</span>黑体字<span class="symbol">\*</span><span class="symbol">\*</span></span><br></pre></td></tr></table></figure><p>这个不是# 标题</p><p>这个不是# 标题<br>这个不是<strong>黑体字</strong></p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>猿必备，上面已经展示了，用三个<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; \``` &gt; # this is code block</span><br><span class="line">&gt;</span><br><span class="line">&gt; \``` &gt; # this is code block</span><br><span class="line">&gt; print “Hello, world.”</span><br><span class="line">&gt;</span><br><span class="line">&gt; \``` &gt; # this is code block</span><br><span class="line">&gt; print “Hello, world.”</span><br><span class="line">&gt; \</span><br></pre></td></tr></table></figure></p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Hexo 有一些扩展 Markdown 功能，需自行安装插件等：</p><ul><li>Emoji 表情</li><li>播放器</li><li>LaTeX/MathJax</li><li>UML 图</li><li>时序图</li><li><a href="https://theme-next.iissnan.com/tag-plugins.html" target="_blank" rel="noopener">Next 主题的扩展</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Markdown 就是一种轻量级的标记语言（Lightweight Markup Language），用人话说就是，普通的文本加上简单的排版或格式化语法（特殊标记），和 HTML，RTF 类似，只是 Markdown 的语法非常简单。Markdown 编写工具很多，在线的也
      
    
    </summary>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/10/22/hello-world/"/>
    <id>http://yoursite.com/2018/10/22/hello-world/</id>
    <published>2018-10-22T08:20:15.976Z</published>
    <updated>2018-10-25T05:41:56.631Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h4 id="这是一篇如何搭建hexo的傻瓜文档：hexo从零开始到搭建完整"><a href="#这是一篇如何搭建hexo的傻瓜文档：hexo从零开始到搭建完整" class="headerlink" title="这是一篇如何搭建hexo的傻瓜文档：hexo从零开始到搭建完整"></a>这是一篇如何搭建hexo的傻瓜文档：<a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="noopener">hexo从零开始到搭建完整</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="http://yoursite.com/2018/03/20/webpack/"/>
    <id>http://yoursite.com/2018/03/20/webpack/</id>
    <published>2018-03-20T03:07:46.000Z</published>
    <updated>2018-10-31T03:11:44.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么使用webpack"><a href="#为什么使用webpack" class="headerlink" title="为什么使用webpack"></a>为什么使用webpack</h2><p>随着互联网的日益发展现在的网页越来越像是一个功能丰富的应用，其中包含了大量的js代码和各种各样相互依赖的包。为了能够简化开发的复杂度，前端社区里涌现出很多的实践方法。</p><ul><li>模块化，将复杂的程序细化成为小的文件</li><li>类似于TypeScript这种在js基础上扩展出来的语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能转换为JavaScript文件使浏览器可以识别；</li><li>sass less 等css的预编译器</li><li>模块化的概念请参考<a href="https://www.webpackjs.com/concepts/modules/" target="_blank" rel="noopener">webpack module</a><br>这些额外的改进确实大大的提高了我们的开发效率，但是利用他们开发的文件往往需要额外的配置才能被浏览器所能够识别，而手动处理有十分的繁琐，于是就出现了类似于webpack之类的工具。</li></ul><h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h2><p>webpack可以看做是一个<strong>模块打包机</strong>，它做的事情是：分析你项目结构，找到javascript模块和其他浏览器不能够识别的语言(scss less),并将其转换和打包为合适的格式供浏览器使用。</p><h2 id="webpack的工作模式"><a href="#webpack的工作模式" class="headerlink" title="webpack的工作模式"></a>webpack的工作模式</h2><p>webpack的工作方式是：把你的项目当做是一个整体，通过一个给定的主文件(index.js)，从这个文件开始找到你项目的所有依赖文件，使用loaders处理他们，最后打包为一个或者多个浏览器能够识别的文件。webpack想比较于其他的前端自动化处理工具速度更快处理的文件类型更多。<br><img src="./webpack.png" alt="webpack"></p><h2 id="核心概念-4"><a href="#核心概念-4" class="headerlink" title="核心概念(4)"></a>核心概念(4)</h2><ul><li>入口(entry)</li><li>出口(output)</li><li>loader</li><li>插件(plugins)</li></ul><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。每个依赖项随即被处理，最后输出到称之为 bundles 的文件中。</p><h3 id="出口"><a href="#出口" class="headerlink" title="出口"></a>出口</h3><p>output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件。你可以通过在配置中指定一个 output 字段，来配置这些处理过程</p><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</p><p>本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。</p><p>在更高层面，在 webpack 的配置中 loader 有两个目标：</p><ol><li>test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。</li><li>use 属性，表示进行转换时，应该使用哪个 loader。</li></ol><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。<br>想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。</p><h2 id="开始使用webpack"><a href="#开始使用webpack" class="headerlink" title="开始使用webpack"></a>开始使用webpack</h2><h3 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h3><ol><li>新建一个空的文件夹(uek)，在改文件夹中建立package.json文件。这是一个标准的npm说明文件，里面包含着大量的信息，包括当前项目的依赖模块，自定义脚本任务等等。在终端中使用<code>npm init</code>命令可以自动创建这个 package.json文件。输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。</li><li>package.json文件准备就绪，我们在本项目中安装webpack作为依赖包</li></ol><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack@<span class="number">3.6</span><span class="number">.0</span> --save-dev</span><br><span class="line">npm install webpack@<span class="number">3.6</span><span class="number">.0</span> --save-dev -g</span><br></pre></td></tr></table></figure><ol><li>在uek文件夹中，创建app文件夹和public文件夹。app文件夹中放原始数据和我们将写的JavaScript模块，public文件夹用来存放之后供浏览器读取的文件（包括使用webpack打包生成的js文件以及一个index.html文件）。</li></ol><ul><li>index.html –放在public文件夹中;</li><li>Greeter.js– 放在app文件夹中; </li><li>main.js– 放在app文件夹中;</li></ul><p>我们在index.html文件中写入最基础的html代码，它在这里目的在于引入打包后的js文件（这里我们先把之后打包后的js文件命名为bundle.js，之后我们还会详细讲述）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们在Greeter.js中定义一个返回包含问候信息的html元素的函数,并依据CommonJS规范导出这个函数为一个模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> greet = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  greet.textContent = <span class="string">"Hi there and greetings!"</span>;</span><br><span class="line">  <span class="keyword">return</span> greet;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>main.js文件中我们写入下述代码，用以把Greeter模块返回的节点插入页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Greet = <span class="built_in">require</span>(<span class="string">'./Greet.js'</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#root'</span>).appendChild(Greet());</span><br></pre></td></tr></table></figure><h3 id="在配置文件中使用webpack"><a href="#在配置文件中使用webpack" class="headerlink" title="在配置文件中使用webpack"></a>在配置文件中使用webpack</h3><p>Webpack拥有很多其它的比较高级的功能（loaders、plugins），这些功能其实都可以通过命令行模式实现，但这样不太方便且容易出错的，更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，我们可以把所有的与打包相关的信息放在里面。<br>继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，我们在其中写入如下所示的简单配置代码，目前的配置主要涉及到的内容是入口文件路径和打包后文件的存放路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:  __dirname + <span class="string">"/app/main.js"</span>,<span class="comment">//已多次提及的唯一入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">"/public"</span>,<span class="comment">//打包后的文件存放的地方</span></span><br><span class="line">        filename: <span class="string">"bundle.js"</span><span class="comment">//打包后输出文件的文件名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在终端输入命令 webpack（全局安装），然后你会在public文件夹下看到打包文件bundle.js。这中方式我们就可以省去烦人的命令行。如果我们连webpack命令都可以不用，会感觉更爽。</p><h3 id="更快捷的执行任务打包"><a href="#更快捷的执行任务打包" class="headerlink" title="更快捷的执行任务打包"></a>更快捷的执行任务打包</h3><p>在命令输入命令需要代码类似于 <code>webpack</code>（非全局这样的路径其实是比较麻烦的，值得庆幸的是<code>npm</code>可以引导任务执行，对<code>npm</code>进行配置后可以在命令中使用简单的<code>npm start</code>命令来代替上面繁琐的命令。在<code>package.json</code>中对<code>script</code>对象进行设置即可，设置如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"demo2"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"^3.6.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>npm的start命令是一个特殊的脚本名称，其特殊性体现在，在命令中使用<code>npm start</code>就可以执行它对应的命令，如果脚本的命令不是 <code>start</code>，想要在命令中运行时，需要这样用 <code>npm run name</code> 如 <code>npm run dev</code> ，我们在命令中输入 <code>npm start</code>。这样就可以开始打包文件了。</p><h2 id="使用webpack构建本地服务器"><a href="#使用webpack构建本地服务器" class="headerlink" title="使用webpack构建本地服务器"></a>使用webpack构建本地服务器</h2><p>想不想让你的浏览器监听到代码的修改，并自动刷新显示修改之后的结果，其实webpack提供了一可选的本地开发服务穷，这个本地服务器是寄语node.js构建的，可以实现你想要的这些功能，不过他是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖。</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-<span class="built_in">dev</span>-server --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>devserver配置项</th><th>功能描述</th></tr></thead><tbody><tr><td>contentBase</td><td>默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录）</td></tr><tr><td>port</td><td>设置监听端口，如果省略，默认为8080</td></tr><tr><td>inline</td><td>设置为true，当源文件改变时会自动刷新页面</td></tr><tr><td>historyApiFallback</td><td>在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为<code>true</code>，所有的跳转将指向index.html</td></tr></tbody></table><p>把这些命令添加到 webpack的配置文件中，现在的配置文件 <code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:  __dirname + <span class="string">"/app/main.js"</span>,<span class="comment">//已多次提及的唯一入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">"/public"</span>,<span class="comment">//打包后的文件存放的地方</span></span><br><span class="line">        filename: <span class="string">"bundle.js"</span><span class="comment">//打包后输出文件的文件名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">"./public"</span>,<span class="comment">//本地服务器所加载的页面所在的目录</span></span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,<span class="comment">//不跳转</span></span><br><span class="line">        inline: <span class="literal">true</span><span class="comment">//实时刷新</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在package.json中的scripts对象中添加如下命令，用来开启本地服务器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"script"</span>:&#123;</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">   <span class="string">"start"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">   <span class="string">"server"</span>: <span class="string">"webpack-dev-server --open"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在终端中输入 <code>npm run server</code>即可在本地 <code>8080</code>端口查看到结果。</p><h2 id="loader-1"><a href="#loader-1" class="headerlink" title="loader"></a>loader</h2><p>通过使用不同的loader，webpack有能力调用外部的脚本或者是工具，实现对不同格式文件的处理，比如说分析转换scss为css，或者把下一代的js文件转换为现代浏览器兼容的js文件，对react的开发而言，合适的loader可以把React中的用到的JSX文件转换为JS文件。<br>loader需要单独安装并且需要在<code>webpack.config.js</code>中的<code>modules</code>关键字下进行配置，loaders的配置项包括以下几个方面。</p><ul><li>test： 一个用来匹配loader所处理文件的扩展名的正则表达式(必须)</li><li>loader：loader的名称(必填)</li><li>include/exclude：手动添加必须处理的文件(文件夹)或屏蔽不需要处理的文件(文件夹)（可选）</li><li>query：为loader提供额外的设置选项（可选）</li></ul><p>在配置loader之前，我们把<code>Greeter.js</code>里的问候消息放在一个单独的json文件里，并通过合适的配置是 <code>Greeter.js</code>可以读取改json文件的值，个文件修改代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"greetText"</span>:<span class="string">"this is greet from json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新后的Greeter.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> config = <span class="built_in">require</span>(<span class="string">'./config.json'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> greet = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    greet.textContent = config.greetText;</span><br><span class="line">    <span class="keyword">return</span> greet;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Babel的安装与配置"><a href="#Babel的安装与配置" class="headerlink" title="Babel的安装与配置"></a>Babel的安装与配置</h2><p>Babel其实是几个模块的包，其核心功能位于称为 babel-core的npm包中，webpack可以把其不同的包整合在一起使用，对于每一个你需要的功能或扩展，你需要安装单独的包（用的做多解析es6的<code>babel-env-preset</code>包和解析<code>JSX</code>的<code>babel-preset-react</code>包）</p><p>我们先来一次性安装这些安装包</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// npm一次性安装多个依赖模块，模块之间用空格隔开</span><br><span class="line"><span class="symbol">npm</span> install --save-dev <span class="keyword">babel-core </span><span class="keyword">babel-loader </span><span class="keyword">babel-preset-env </span><span class="keyword">babel-preset-react</span></span><br></pre></td></tr></table></figure><p>在webpack中配置babel的方法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/(\.jsx|\.js)$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        presets: [</span><br><span class="line">                            <span class="string">"env"</span>, <span class="string">"react"</span></span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>现在webpack的配置已经允许你使用ES6以及JSX的语法了。继续上面的例子进行测试，这是我们使用React，先安装React和React-DOM</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> react react-dom</span><br></pre></td></tr></table></figure><p>接下来我们使es6的语法，更新 <code>Greet.js</code> 并返回一个React组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config.json'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;config.greetText&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Greeter</span></span><br></pre></td></tr></table></figure><p>修改<code>main.js</code>如下，使用es6的模块定义和渲染Greeer模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Greeter <span class="keyword">from</span> <span class="string">'./Greeter'</span>;</span><br><span class="line"></span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">Greeter</span> /&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure><p>重新使用<code>npm start</code>打包，如果和之前打开的本地服务器没关，我们可以在<code>localhost:8080</code>下面看到与之前一样的内容。这说明es6和react正常打包了。</p><h2 id="babel的配置"><a href="#babel的配置" class="headerlink" title="babel的配置"></a>babel的配置</h2><p>babel其实可以完全在 <code>webpack.config.js</code>中进行配置，但是考虑到babel具有非常多的配置项，在单一的 <code>webpack.config.js</code>文件中配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置项放在一个单独的名为<code>.babelrc</code>的配置文件中。我们现在的babel的配置配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分俩个配置文件进行配置(webpack会自动调用1<code>.babelrc</code>里面babel配置选项),如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: __dirname + <span class="string">"/app/main.js"</span>,<span class="comment">//已多次提及的唯一入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">"/public"</span>,<span class="comment">//打包后的文件存放的地方</span></span><br><span class="line">        filename: <span class="string">"bundle.js"</span><span class="comment">//打包后输出文件的文件名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'eval-source-map'</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">"./public"</span>,<span class="comment">//本地服务器所加载的页面所在的目录</span></span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,<span class="comment">//不跳转</span></span><br><span class="line">        inline: <span class="literal">true</span><span class="comment">//实时刷新</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/(\.jsx|\.js)$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">"babel-loader"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>:[<span class="string">"react"</span>,<span class="string">"env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到目前为止，我们已经知道了，对于模块，webpack提供了非常强大的处理功能，那那些是模块呢？</p><h2 id="一切皆模块"><a href="#一切皆模块" class="headerlink" title="一切皆模块"></a>一切皆模块</h2><p>webpack有一个不可不说的优点，他把所有 的文件都当做模块处理，javascript代码，css和fonts以及图片等等通过核实的loader都可以被处理。</p><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><p>webpack提供了俩个工具处理样式表，<code>css-loader</code> 和 <code>style-loader</code>, 二者的处理任务不同，<code>css-loader</code>使你能够使用类似 <code>@import 和 url()</code> 的方式实现 <code>require</code>d的功能，<code>style-loader</code>将所有的计算后的样式加入到页面中，二者组合在一起是你能够把样式表嵌入webpack打包后的js文件中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm intall --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 使用  </span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/(\.jsx|\.js)$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">"babel-loader"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"style-loader"</span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        loader: <span class="string">"css-loader"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在app文件夹里创建一个名字为<code>main.css</code>的文件，对一些元素设置样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* main.css */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">-ms-text-size-adjust</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Helvetica Neue'</span>, Helvetica, Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这里例子中用到的webpack只有单一入口，其他的模块需要通过<code>import,require,url</code>等与入口文件建立起关联，为了让webpack能找到<code>main.css</code>我们把它导入<code>main.css</code>中，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Greeter <span class="keyword">from</span> <span class="string">'./Greeter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./main.css'</span>;<span class="comment">//使用require导入css文件</span></span><br><span class="line"></span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">Greeter</span> /&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure><blockquote><p>通常情况下，css会和js打包到同一个文件下，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件。</p></blockquote><p>上面的代码说明webpack是怎么把css当做模块看待，接下来继续看一个更加真实的css模块实践。</p><h2 id="css-module"><a href="#css-module" class="headerlink" title="css module"></a>css module</h2><p>在过去的几年里，Javascript通过一些新的语言特性，更好的工具以及更好的实践方法(比如模块化)发展的非常迅速。模块化使得开发者把复杂的代码转化为更小的，干净的，依赖声明明确的单元，配合优化工具，依赖管理和加载管理可以自动完成。</p><p>不过前端的另外部分，css发展就相对慢一些，大多的样式表却依旧巨大且充满了全局类名，维护和修改都非常的困难。</p><p>被称为<code>css module</code>的技术意在把js的模块化思想带入到css中来，通过css模块，所有的类名，动画名默认都之作用于当前模块。只需要在css loader中进行简单配置即可，然后就可以直接把css的类名传递到组件的代码中，这样做有效避免了全局污染。具体代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/(\.jsx|\.js)$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">"babel-loader"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"style-loader"</span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        loader: <span class="string">"css-loader"</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            modules: <span class="literal">true</span>, <span class="comment">// 指定启用css modules</span></span><br><span class="line">                            localIdentName: <span class="string">'[name]__[local]--[hash:base64:5]'</span> <span class="comment">// 指定css的类名格式</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们在app文件夹下创建一个<code>Greet.css</code>文件来进行测试</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Greet.css */</span></span><br><span class="line"><span class="selector-class">.root</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入<code>.root</code>到Greet.js中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config.json'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./Greeter.css'</span>;<span class="comment">//导入</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=&#123;styles.root&#125;&gt; <span class="comment">//使用cssModule添加类名的方法</span></span><br><span class="line">        &#123;config.greetText&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>放心使用，相同的类名也不会造成不同组件在之间的污染。</p><h2 id="css预处理器"><a href="#css预处理器" class="headerlink" title="css预处理器"></a>css预处理器</h2><p><code>sass</code>和<code>less</code>之类的预处理器是对原生css的拓展，它允许你使用变量嵌套混合等不存在与css中的特性来写css，css预处理器可以将这些特殊类型的语句转化为浏览器可识别的css语句。</p><p>接下来我们在webpack中使用相关的loader进行相关的配置就可以使用了，一下是常用的css处理loaders：</p><ul><li>Less loader</li><li>Sass loader</li><li>Stylus loader</li></ul><p>也存在一个处理css的平台<code>-PostCSS</code>，他可以帮助你的css实现更多的功能，在<br>[官方文档]: (<a href="https://github.com/postcss/postcss" target="_blank" rel="noopener">https://github.com/postcss/postcss</a>) 可了解更多知识。</p><p>我们来使用 PostCSS为css代码自动添加适应不同浏览器的css前缀。</p><p>首先安装 <code>postss-loader</code>和<code>autoprefixer</code>（自动添加前缀的插件）<br><code>npm install --save-dev post-loader autoprefixer</code></p><p>接下来，在webpack配置文件中添加 <code>postcss-loader</code>，在根目录新建 <code>postcss.config.js</code>，并添加如下代码之后，重新<code>npm start</code>打包时，你写的css会自动添加不同的前缀。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"style-loader"</span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        loader: <span class="string">"css-loader"</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            modules: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        loader: <span class="string">"postcss-loader"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        require(<span class="string">'autoprefixer'</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理scss</span></span><br><span class="line">&#123;</span><br><span class="line">                test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    loader: <span class="string">"style-loader"</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    loader: <span class="string">"css-loader"</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    loader: <span class="string">"sass-loader"</span>,</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h3><ul><li>安装库</li></ul><p><code>npm i --save-dev url-loader file-loader</code></p><ul><li>相应配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            <span class="comment">// 图片格式正则</span></span><br><span class="line">                test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                    <span class="comment">// 配置 url-loader 的可选项</span></span><br><span class="line">                    options: &#123;</span><br><span class="line">                    <span class="comment">// 限制 图片大小 10000B，小于限制会将图片转换为 base64格式</span></span><br><span class="line">                      limit: <span class="number">10000</span>,</span><br><span class="line">                    <span class="comment">// 超出限制，创建的文件格式</span></span><br><span class="line">                    <span class="comment">// build/images/[图片名].[hash].[图片格式]</span></span><br><span class="line">                      name: <span class="string">'images/[name].[hash].[ext]'</span></span><br><span class="line">                   &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>至此，本文已经谈论了处理js的babel和处理css的PostCSS的基本用法，他们其实也是俩个独立的平台，配合webpack可以很好地发挥他们的作用。接下来介绍webpack中的另一个非常重要的功能——插件。</p><h2 id="插件-plugins"><a href="#插件-plugins" class="headerlink" title="插件(plugins)"></a>插件(plugins)</h2><p>插件是用来扩展webpack功能的，他们会在整个构建过程中生效，执行相关的任务。<br>loader和plugin常常被弄混，但是他们其实是完全不同的东西，可以这么说，loader是在打包构建工程中用来处理源文件的(less,sass,jsx)，一次处理一个，插件并不直接操作单个文件，他直接对整个构建过程起作用。</p><p>webpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。</p><h2 id="使用插件方法"><a href="#使用插件方法" class="headerlink" title="使用插件方法"></a>使用插件方法</h2><p>要使用某个插件，我们需要通过npm安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续上面的例子，我们添加了一个给打包后代码添加版权声明的插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'版权所有，翻版必究'</span>)</span><br><span class="line">    ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是webpack插件的基本用法，下面给大家推荐几个常用插件。</p><h2 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h2><p>这个插件的作用是依据一个简单的<code>index.html</code>模板，生成一个自动引用你打包后js文件的新index.html。这在每次生成的js文件名称不同时非常有用。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> html-webpack-plugin</span><br></pre></td></tr></table></figure><p>这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些更改：</p><ol><li>移除public文件夹，利用此插件，<code>index.html</code>文件会自动生成，此外css已经通过前面的操作打包到js中了。</li><li>在app目录下，创建一个<code>index.tmpl.html</code>文件模板，这个模板包含<code>title</code>等必须元素，在编译过程中，插件会依据此模板生成最终的html页面， 会自动添加所依赖的css，js，favicon等文件，<code>index.temp.html</code>中的模板源代码如下：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'root'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>更新webpack的配置文件，方法同上，新建一个build文件夹用来存放最终的输出文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: __dirname + <span class="string">"/app/main.js"</span>,<span class="comment">//已多次提及的唯一入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">"/build"</span>,</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'eval-source-map'</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">"./public"</span>,<span class="comment">//本地服务器所加载的页面所在的目录</span></span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,<span class="comment">//不跳转</span></span><br><span class="line">        inline: <span class="literal">true</span><span class="comment">//实时刷新</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/(\.jsx|\.js)$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">"babel-loader"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"style-loader"</span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        loader: <span class="string">"css-loader"</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            modules: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        loader: <span class="string">"postcss-loader"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'版权所有，翻版必究'</span>),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: __dirname + <span class="string">"/app/index.tmpl.html"</span><span class="comment">//new 一个这个插件的实例，并传入相关的参数</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再次执行 <code>npm start</code> ，build文件夹下生成了 <code>bundle.js  index.html</code>。</p><h2 id="产品阶段构建"><a href="#产品阶段构建" class="headerlink" title="产品阶段构建"></a>产品阶段构建</h2><p>目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说：优化，压缩，缓存以及分离css和js。<br>对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小文件可以使得事情井井有条，以上面的例子来看，我们创建一个 <code>webpack.production.config.js</code>文件，在里面加上基本的配置，他和原始的webpack.config.js很像，如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.production.config.js</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: __dirname + <span class="string">"/app/main.js"</span>, <span class="comment">//已多次提及的唯一入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">"/build"</span>,</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'null'</span>, <span class="comment">//注意修改了这里，这能大大压缩我们的打包代码</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">"./public"</span>, <span class="comment">//本地服务器所加载的页面所在的目录</span></span><br><span class="line">        historyApiFallback: <span class="literal">true</span>, <span class="comment">//不跳转</span></span><br><span class="line">        inline: <span class="literal">true</span>,</span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/(\.jsx|\.js)$/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">"babel-loader"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">                fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    loader: <span class="string">"css-loader"</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        modules: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    loader: <span class="string">"postcss-loader"</span></span><br><span class="line">                &#125;],</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'版权所有，翻版必究'</span>),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: __dirname + <span class="string">"/app/index.tmpl.html"</span> <span class="comment">//new 一个这个插件的实例，并传入相关的参数</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin() <span class="comment">//热加载插件</span></span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"test"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="string">"server"</span>: <span class="string">"webpack-dev-server --open"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"NODE_ENV=production webpack --config ./webpack.production.config.js --progress"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">...</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"react"</span>: <span class="string">"^15.6.1"</span>,</span><br><span class="line">    <span class="string">"react-dom"</span>: <span class="string">"^15.6.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果是window电脑，build需要配置为 <code>&quot;build&quot;: &quot;set NODE_ENV=production &amp;&amp; webpack --config ./webpack.production.config.js --progress&quot;</code></p></blockquote><h2 id="优化插件"><a href="#优化插件" class="headerlink" title="优化插件"></a>优化插件</h2><p>webpack提供了一些在发布阶段非常有用的一些插件，他们大多来自webpack社区，可以通过npm安装，通过以下插件可以在完成产品发布阶段所需的功能</p><ul><li>OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</li><li>UglifyJsPlugin:压缩js代码</li><li>ExtractTextPlugin:分离css和js文件</li></ul><p>OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装其它非内置插件</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-dev extract-<span class="built_in">text</span>-webpack-plugin</span><br></pre></td></tr></table></figure><p>在配置文件的plugins后启用他们</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const ExtractTextPlugin = require('extract-text-webpack-plugin');</span></span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'版权所有，翻版必究'</span>),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: __dirname + <span class="string">"/app/index.tmpl.html"</span></span><br><span class="line">        &#125;),</span><br><span class="line">         <span class="keyword">new</span> UglifyJsPlugin(),</span><br><span class="line">       <span class="comment">// new webpack.optimize.OccurrenceOrderPlugin(),</span></span><br><span class="line">       <span class="comment">//new webpack.optimize.UglifyJsPlugin(),</span></span><br><span class="line">       <span class="comment">// new ExtractTextPlugin("styles.css")</span></span><br><span class="line">    ],    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时执行<code>npm run build</code>可以看见代码是被压缩后的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么使用webpack&quot;&gt;&lt;a href=&quot;#为什么使用webpack&quot; class=&quot;headerlink&quot; title=&quot;为什么使用webpack&quot;&gt;&lt;/a&gt;为什么使用webpack&lt;/h2&gt;&lt;p&gt;随着互联网的日益发展现在的网页越来越像是一个功能丰富的应用，
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>HTML笔记</title>
    <link href="http://yoursite.com/2017/08/22/HTML%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/08/22/HTML笔记/</id>
    <published>2017-08-22T06:02:48.000Z</published>
    <updated>2018-10-31T03:15:01.316Z</updated>
    
    <content type="html"><![CDATA[<p>HTML（HyperText Markup Language，超文本标记语言） 是用来定义网页结构的一种描述语言。</p><p>HTML:超文本标记语言</p><p><strong>一．标签按照语法分类：</strong></p><p>1.单标签：开始标签</p><pre><code>&lt;标签名&gt;例如：meta</code></pre><p>2.双标签:开始标签/结束标签构成</p><pre><code>&lt;标签名&gt;&lt;/标签名&gt;例如：&lt;head&gt;&lt;/head&gt;</code></pre><p>3.注释标签(Ctrl+ / )：</p><pre><code>&lt;!-- --&gt;</code></pre><ol><li>表单控件（属于行内块元素）：文本框<input> <input type="“button”" value(值)="搜索按钮"></li></ol><p><strong>二．按照页面中的呈现效果分类：</strong></p><p>1.块元素</p><p>  特性：可以设置宽高，独占一行。</p><p>  例如：div p(段落) pre等等;h1-h6\</p><pre><code>列表标签：无序列表:ul;li        ul下边必须嵌套的是li有序列表:ol;li        ...项目列表：dl\dt;dd    dl→dt→dd</code></pre><p>2.行内元素</p><p>  特性：在一行内显示，不可以设置宽高。</p><p>  例如：<a href="">this is my sister</a></p><pre><code>b(加粗);em着重文字；i倾斜;span</code></pre><p>span标签不可以设置宽高，浮动之后可以设置宽高</p><p>3.行内块元素</p><p>  特性：在一行内显示，可以设置宽高。</p><p>  例如：img\表单控件（input）</p><p><strong>元素级别</strong>：</p><p>块元素&gt;行内块元素&gt;行内元素</p><p><strong>元素的转换（</strong>display<strong>）</strong></p><p>块元素：block</p><p>行内元素：inline</p><p>行内块元素：inline-block</p><p><strong>div.btn{$$}\19 点tab键同时复制19句</strong></p><p><strong>文档流：</strong></p><p>从左到右，从上到下</p><p><strong>一个元素实际的宽高：</strong></p><p>实际的宽度 = border-left+padding-left+width+padding-right+border-right</p><p>实际的高度 = border-top+padding-top+height+padding-dottom+border-bottom</p><p><strong>元素的嵌套规则：</strong></p><p>相同级别可以相互嵌套。级别高的元素可以嵌套元素级别低的元素</p><p>属性：</p><p>语法：1.位置在哪里？在开始标签中。</p><pre><code>2.&lt;meta 属性名(如charset)=&quot;属性值&quot;&gt;3.&lt;div 属性名=&quot;属性值1 属性值2&quot;&gt; 例如：&lt;div class=&quot;box1 box2&quot;&gt;&lt;/div&gt;</code></pre><p><strong>路径的两种方式：</strong></p><p>1.绝对路径：从盘符开始的路径；</p><p>2.相对路径：一个文件和另一个文件的关系</p><p>返回上一级： ../</p><p>CSS层叠样式表：</p><p>选择器   和  样式</p><p><strong>一．选择元素</strong></p><p><strong>1.标签选择器:选择页面中所有的标签</strong></p><p>语法：</p><pre><code>标签名{           样式名：样式值;           样式名：样式值;           ...       }div{     width:600px;     height:600px;     background-color:red;    }</code></pre><p><strong>2.类名选择器：选择页面中类名为的全部元素。</strong></p><p>语法：.类名{</p><pre><code> 样式名:样式值;}</code></pre><p><strong>3.后代选择器：<em>**</em></strong></p><p>元素一  元素二{  }</p><p><strong>4.群组选择器：</strong></p><p>元素一,元素二…{ }</p><p><strong>5、通用选择器</strong></p><p>*{</p><p>​    Width:100px;</p><p>}</p><p><strong>6、交叉选择器：选择类名一样的其中的一个标签</strong></p><p>tabName.className{}</p><p><strong>7、子类选择器</strong></p><p>E&gt;F{}</p><p>.box &gt;div</p><p><strong>8、兄弟选择器</strong></p><p>E+F  相邻的兄弟元素</p><p><strong>9、伪类选择器（选中元素的一种状态）：</strong></p><p><strong>1、：hover{} 选中元素的鼠标移入状态</strong></p><p><strong>2、:Link{} 默认时的状态</strong></p><p><strong>3、:active{} 跳转点击时的状态</strong></p><p><strong>4、:visited{} 访问过后的状态</strong></p><p><strong>三．伪元素选择器（选择不存在的元素）</strong></p><p><strong>1**</strong>、<strong>*</strong>::before{content:” ”;} <strong>**  </strong>在内容之前添加的伪元素（行内元素）</p><p><strong>2**</strong>、<strong>*</strong>::after{content:” ”;} <strong>**    </strong>在内容之后添加的伪元素<em>**</em></p><p><strong>3**</strong>、<strong>*</strong>::first-letter{content:” ”;} <strong>**  </strong>在内容中添加首字母的伪元素</p><p><strong>4**</strong>、<strong>*</strong>::first-line{content:” ”;} <strong>**   </strong>在内容中添加行的伪元素</p><p>定义属性时：必须<strong>content:” ”;  **</strong>转换块元素**</p><p><strong>四、结构伪类：</strong></p><p><strong>.box{}<em>**</em></strong></p><p><strong>1**</strong>、.box p:nth-child(1){}        作为box中里面第一个子元素的P标签</p><p><strong>2</strong>、.box p:nth-last-child(3){}      作为box中里面倒数第三个子元素的P标签</p><p><strong>3</strong>、.box p:nth-first-child{}         作为box中里面第一个子元素的P标签</p><p><strong>4</strong>、.box div:nth-of-type(1){}        作为box中里面同类型的第一个子元素的div标签</p><p><strong>5</strong>、.box div:nth-last-of-type(1){}    作为box中里面同类型的第一个子元素的div标签</p><p><strong>6</strong>、.box div:nth-first-of-type{}      作为box中里面同类型的倒数第一个子元素的div标签</p><p><strong>7</strong>、.box div:nth-child(1){}          作为box中里面第一个子元素的div</p><p><strong>8</strong>、.box div:last-child{}           作为box中里面倒数第一个子元素的div</p><p><strong>9</strong>、.box div:first-child{}            作为box中里面第一个子元素的div</p><p><strong>10</strong>、.box div:empty{}             选中一个没有内容的div（一切元素都没有的时候）</p><p><strong>11</strong>、 html:root{}                选中根元素</p><p><strong>12、</strong> .box div:only-child{}          选中元素的唯一元素（比.box div的优先级别高）</p><p><strong>13</strong>、.box div:only-of-type{}          选中元素的唯一同类型元素</p><p><strong>样式表的引入方式：</strong></p><p><strong>1.**</strong>外链式样式<strong>**</strong></p><link rel="" "stylesheet"="" "href"=""><p><strong>2.**</strong>嵌入式样式表<strong>**</strong></p><style>.box{width:200px;height:200px;}</style><p><strong>3.**</strong>行内样式表<strong>**</strong></p><div style="width:200px;height:200px;"></div><p><strong>行内样式优先级最高。嵌入式和外链式的优先级由引入页面中的顺序决定，离元素越近，优先级越高。<em>**</em></strong></p><hr><p>A   B   C   D   E</p><p>1   2   3   3   0</p><p>-———————————————————————————————-</p><p>A  style</p><p>B  ID 选择器的数量</p><p>C  class类名选择器的数量/  伪类选择器的数量/属性选择器的数量</p><p>D  标签选择器的数量/伪元素选择器的数量        </p><p>E  通用选择器</p><p>-————————————————————————————————–</p><p>ID 选择器的优先级：100（#代表id）  </p><p>类名选择器的优先级：10</p><p>标签选择器的优先级：1</p><p><strong>选择器的优先级原则：越具体优先级越高。</strong></p><p><strong>五**</strong>.<strong><strong>盒子模式：**</strong></strong></p><p>content(width,height)</p><p>padding(内填充，内容和边框的距离)</p><p>border(边框)</p><p>margin（外间距 元素和元素之间的距离）</p><hr><p><strong>margin:0 auto :**</strong>让块元素在父元素中水平居中<strong>**</strong></p><p><strong>text-align:**</strong>行内元素水平方向的对齐元素<strong>**</strong></p><p><strong>line-height:120px;**</strong>定义行高<strong>**</strong></p><p><strong>margin:50px  100px  **</strong>上下<strong><strong>  </strong></strong>左右<strong>**</strong></p><p><strong>margin:50px 100px 50px **</strong>上<strong><strong> </strong></strong>左右<strong><strong> </strong></strong>下<strong>**</strong></p><p><strong>margin:50px 100px 200px 300px **</strong>上右下左<strong>**</strong></p><hr><hr><p><strong>盒子模型中的一些问题：<em>**</em></strong></p><ol><li><p><strong>默认情况下大部分元素的**</strong>margin\padding<strong><strong>都为</strong></strong>0<strong><strong>，但是有一些元素的</strong></strong>margin\padding<strong><strong>不为</strong></strong> 0.<strong><strong>比如说：</strong></strong>h1-h6<strong><strong>标签</strong></strong>\P\body\ul,li\ol,li\dl dt dd<strong>**</strong></p></li><li><p><strong>相邻的两个块元素的**</strong>margin<strong><strong>值会重合。值会取得最大值。**</strong></strong></p></li><li><p><strong>行内元素的**</strong>margin<strong><strong>只有左右没有上下。**</strong></strong></p></li><li><p><strong>margin**</strong>可以设置为负数，<strong><strong>padding</strong></strong>不可以。<strong>**</strong></p></li><li><p><strong>当两个元素发生嵌套关系，如果父元素没有上边边框，上**</strong>padding<strong><strong>值，父子之间没有其他内容。此时子元素的</strong></strong>margin-top<strong><strong>值回作用到父元素身上。（解决方法一：给父元素加</strong></strong>padding-top<strong><strong>来代替子元素加</strong></strong>margin-top<strong><strong>；解决方法二：给父元素添加</strong></strong>overflow:hidden/*<strong><strong>超出部分：隐藏*</strong></strong>/<strong><strong>）**</strong></strong></p></li></ol><hr><hr><p><strong>六．**</strong>float<strong><strong>浮动**</strong></strong></p><p>原理：让元素脱离文档流。</p><p>解决：块元素独占一行。</p><p>浮动的子元素撑不开父元素</p><p>1.给父元素添加   overflow:hidden;</p><p>2clear:left/right/both;在父元素最后添加一个拥有清除浮动属性的子元素.</p><p>.box::affter{</p><p>Content:””;</p><p>Display:block;</p><p>Clear:both;</p><p>}</p><p>浮动之后宽度会自动参照内容。</p><p>字体：font-weight:normal 正常不加粗</p><pre><code>bold加粗100-900（单位，加粗程度）</code></pre><p>Padding-left:2em; 当前字体的2倍  em指字数的二倍</p><p><strong>所有字体的设置都可以被继承<em>**</em></strong></p><p>auto:高度参照内容元素</p><pre><code>宽度参照父元素   子元素的border+padding+margin值不会大于父元素</code></pre><p><strong>box-sizing:border-box  **</strong>容器的宽高变成实际尺寸<strong>**</strong></p><p><strong>cursor**</strong>：<strong><strong>pointer;</strong></strong>鼠标样式手型<strong>**</strong></p><p><strong>List-style:none;  **</strong>清除列表样式<strong>**</strong></p><p><strong>Border-radius:3px   **</strong>边框的半径<strong>**</strong></p><p><strong>Max-height   **</strong>最大高度<strong>**</strong></p><p><strong>Min-height    **</strong>最小高度<strong>**</strong></p><p><strong>Display:none;  **</strong>超出部分消失<strong><strong>  //  display:block;   </strong></strong>超出部分出现<strong>**</strong></p><p><strong>Visibility:hidden ;  **</strong>超出元素隐藏<strong><strong>  //  visibility:visible  </strong></strong>超出部分出现<strong>**</strong></p><hr><hr><p><strong>CSS3**</strong>样式<strong>**</strong></p><p><strong>1.**</strong>过渡（<strong><strong>transition</strong></strong>）：<strong>**</strong></p><p> transition:all /width  1s     ease/ease-in/../linear[匀速]     1s;  </p><p>样式   过渡时间  [时间函数,默认ease]       [延迟] </p><p>Transition-property:width height;</p><p>Transition-duration:1s;</p><p>Transition-timing-function:linear;</p><p>Transition-timing-function:cubic-bezier(0.98,0.38,0.21,1.06) 贝塞尔曲线</p><p>Transition-delay:initial;</p><p>Transition-delay:1s;<em>**</em></p><ol><li><strong> 2D**</strong>（<strong><strong>transform</strong></strong>）<strong>**</strong></li></ol><p><strong>(1)**</strong>平移<strong>**</strong></p><p><strong>样式名：**</strong>transform;<strong>**</strong></p><p><strong>样式值：**</strong>translate;(x,y)<strong><strong>平移</strong></strong>   /  translateX(number);   /translateY(number);<strong>**</strong></p><ol><li><strong>旋转<em>**</em></strong></li></ol><p><strong>  Rotate(value);   **</strong>角度<strong><strong>45deg/-45deg  rad</strong></strong>弧度<strong><strong>   turn</strong></strong>圈数<strong>**</strong></p><p><strong>(3)**</strong>缩放<strong>**</strong></p><p><strong>  Scale(x,y)    scaleX(value)    ScaleY(valuer)<em>**</em></strong></p><ol><li><strong>斜切<em>**</em></strong></li></ol><p><strong>  Skew(x,y)            SkewX(value)   skexY(value)<em>**</em></strong></p><hr><hr><p><strong>Box-shadow:0 10px 10px 5px rgba(0,0,0,1) <em>**</em></strong></p><p><strong>阴影：**</strong>Box-shadow<strong>**</strong></p><p><strong>Box-shadow:;<em>**</em></strong></p><p><strong>X**</strong>轴偏移量<strong>**</strong></p><p><strong>Y**</strong>轴偏移量<strong>**</strong></p><p><strong>阴影的模糊程度<em>**</em></strong></p><p><strong>阴影的大小<em>**</em></strong></p><p><strong>阴影的颜色<em>**</em></strong></p><p><strong>[inset]<em>**</em></strong></p><hr><hr><ol><li><strong> 3D<em>**</em></strong></li></ol><p><strong>场景：**</strong>Perspective:500px;   <strong><strong>灭点</strong></strong>   /perspective-origin<strong><strong>：</strong></strong>x,y   <strong><strong>观察者的位置**</strong></strong></p><p><strong>平移：沿**</strong>z<strong><strong>轴平移</strong></strong>   Transform:translateZ(length);   trsnslate3d(length,length,length)<strong>**</strong></p><p><strong>旋转：</strong>transform:rotateY/X/Z(*turn);   / <strong><strong> rotate3d(0,0,0,angle) </strong></strong> /<strong><strong> </strong></strong>Transform-origin: Top content  left;</p><ul><li>rotate3d(1,0,1,45deg)          <strong>改变圆点</strong></li></ul><ul><li>Transform-style:preseve-3d   <strong><strong>保持</strong></strong>3d<strong>效果</strong></li></ul><p><strong>动画：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@keyframes animation1(*动画1)&#123;</span><br><span class="line">From/0%&#123;</span><br><span class="line">Width:100px;</span><br><span class="line">Height:100px;</span><br><span class="line">     Border-radius:50%;</span><br><span class="line">&#125;</span><br><span class="line">To/100%&#123;</span><br><span class="line"> Width:200px;</span><br><span class="line">Height:200px;</span><br><span class="line"> Border-radius:0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line">Animation:animation1  2s ease 0s;</span><br><span class="line">Forwards 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>渐变：</strong>background-image</p><ol><li><strong>线性渐变：</strong>background-image:repeating-linear-gradient(to right/45deg, red 50%,green,blue);</li><li><strong>重复渐变 默认上</strong></li></ol><ol><li><strong>径向渐变：</strong>background-image<strong><strong>：</strong></strong>repeating-radial-gradient(red 50%,green 70%);</li></ol><p><strong>颜色的表示方式：</strong></p><ol><li><p>颜色的单词：black,pink,yellow等等；</p></li><li><p>十六进制的色值：#000  #fff  #202020等等；</p></li><li><p>RGB(red,green,blue的程度（0-255）)：RGB(255,0,0)红色   RGB(0 255 0)绿色   RGB(000)   黑色   RGB(255,255,255)白色</p></li><li><p>Rgba([0-255]  [0-255]    [0-255]    [0-1]设置成0为透明色)</p></li></ol><hr><p><strong>背景图<em>**</em></strong></p><p>Background-image:url(“../img/**.jpg”)</p><p>Background-color:pink;（背景颜色）</p><p>Background-size:200px auto:背景图尺寸   仅有200px 值为背景图的宽度</p><p>Background-size:cover;   覆盖铺买整个界面</p><p>Background-size:contain;   背景图片优先，最大程度的呈现图片（背景图为图片的原尺寸）</p><p>Background-repeat:no-repeat; 取消重复设置</p><p>Background-repeat:repeat-x/y;    在x轴或y轴重复设置</p><p>Background-position:100px   100px;  背景图片的定位(100px为x轴和y轴的数值)</p><p>Background-position:right bottom;   背景图片在右下角</p><p>Background-position:right ;  背景图片在右中</p><p>Background-origin:border-box;    盒子背景图的渲染位置</p><p>Border-box  边框内 /   padding-box  内填充内（默认） /  content-box  内容内</p><p>Background-clip:content-box;     盒子背景图裁剪位置</p><p>Border-box  边框外裁剪（默认）   padding-box      content-box</p><p>Background-attachment:fixed(固定);</p><p>图片精灵（雪碧图）</p><p>.fanke1{</p><p>​    width: 113px;</p><p>​    height: 42px;</p><p>​    border: 1px solid red;</p><p>​    text-align: center;</p><p>​    margin: 0 auto;</p><p>​    margin-top: 200px;</p><p>​    background-image:url(‘../img/spritesbgtop.png’) ;</p><p>​    background-repeat: no-repeat; </p><p>​    background-position: 0 -581px;</p><p>}</p><p><strong>定位**</strong>(position)<strong><strong>脱离文档流：**</strong></strong></p><ol><li><strong>相对定位**</strong>(relative)<strong>**</strong></li></ol><p><strong>相对自身去定位。保留原来的位置（文档层中的位置）<em>**</em></strong></p><ol><li><strong>绝对定位**</strong>(absolute)<strong>**</strong></li></ol><p><strong>相对于“拥有定位属性（样式）”的父元素去定位。如果父元素没有定位属性，会一直向上一级寻找，直到找到拥有定位属性定位的元素停止。如果一直找不到相对于**</strong>html<strong><strong>定位。完全脱离文档流。**</strong></strong></p><p><strong>3.**</strong>固定定位<strong><strong>(fixed)**</strong></strong></p><p><strong>相对于浏览器的四个边去定位**</strong>.<strong><strong>完全脱离文档流**</strong></strong></p><p><strong>定位的元素会多出五个样式：<em>**</em></strong></p><p><strong>Top  right   bottom  left  z-index(**</strong>层级<strong><strong>)**</strong></strong></p><hr><hr><p><strong>定位的居中方式：<em>**</em></strong></p><ol><li><p><strong>水平居中<em>**</em></strong></p></li><li><p><strong>position:absolute;<em>**</em></strong></p></li></ol><p><strong>     Top:0;<em>**</em></strong></p><p><strong>     Left:50%;<em>**</em></strong></p><p><strong>     Margin-left:50%;<em>**</em></strong></p><ol><li><strong>position:absolute;<em>**</em></strong></li></ol><p><strong>Top:0;<em>**</em></strong></p><p><strong>Left:0;<em>**</em></strong></p><p><strong>Right:0;<em>**</em></strong></p><p><strong>Margin:0 auto;<em>**</em></strong></p><p><strong>·**</strong>left<strong><strong>权重比</strong></strong>right<strong><strong>权重高**</strong></strong></p><p><strong>  Top**</strong>权重比<strong><strong>bottom</strong></strong>权重高<strong>**</strong></p><ol><li><strong>垂直居中<em>**</em></strong></li></ol><p><strong>   (1)Position:absolute;<em>**</em></strong></p><p><strong>   Top:0;<em>**</em></strong></p><p><strong>   Margin-top:-50px;<em>**</em></strong></p><p><strong>    (2)Position:absolute;<em>**</em></strong></p><p><strong>     Top:0;<em>**</em></strong></p><p><strong>    Bottom:0;<em>**</em></strong></p><p><strong>   Margin:0 auto;   <em>**</em></strong></p><ol><li><strong>绝对居中**</strong>  <strong>**</strong></li></ol><p><strong>(1)position:absolute<em>**</em></strong></p><p><strong>      Top:50%;<em>**</em></strong></p><p><strong>      Margin-top:-50px;<em>**</em></strong></p><p><strong>Left:50%;<em>**</em></strong></p><p><strong>Margin-left:-50pxs;<em>**</em></strong></p><hr><p><strong>(2)position:absolute<em>**</em></strong></p><p><strong>      Top:0;<em>**</em></strong></p><p><strong>Right:0;<em>**</em></strong></p><p><strong>Bottom:0;<em>**</em></strong></p><p><strong>Left:0;<em>**</em></strong></p><p><strong>Margin:auto;<em>**</em></strong></p><hr><hr><p><strong>*\</strong>Cursor:pointer   <strong><strong>鼠标经过时变成手型**</strong></strong></p><p><strong>*\</strong>list-style:none   <strong><strong>清除列表样式**</strong></strong></p><p><strong>Outline:none  <em>**</em></strong></p><p><strong>*\</strong>border-radius:50%   <strong><strong>矩形转换为圆**</strong></strong></p><p><strong>.box:hover  .bottom{}  box**</strong>的子元素移入【只能是子元素】<strong><strong>  **</strong></strong></p><p><strong>Opacity:0/1;**</strong>透明度<strong>**</strong></p><hr><p><strong>Ctrl+f**</strong>查找<strong>**</strong></p><p><img src="file:///C:\Users\vicgoo\AppData\Local\Temp\ksohtml\wpsE6F9.tmp.png" alt=""><em>**</em></p><p><strong>移动端口<em>**</em></strong></p><p>视口：viewport</p><p>缩放：Initial-scale=1.0,maximum-scale=1.0,user-scalable=0(不允许用户进行缩放)</p><p>布局视口：屏幕分配出来可供用户布局的范围。一般是980px。</p><p>视觉视口：设备屏幕的大小。</p><p>理想视口：<meta name="”viewport”" content="”Initial-scale=1.0,maximum-scale=1.0,user-scalable=0”"></p><p>像素</p><p>物理像素：屏幕理所能呈现的最小颜色单元。</p><p>逻辑像素：固定的大小</p><p>css像素：css样式表里所写的像素</p><p>Web css像素==逻辑像素==物理像素（浏览器不放大的情况下）</p><p>移动端&gt;css像素&gt;逻辑像素</p><p><strong>弹性布局：**</strong>display:flex<strong>**</strong></p><p>父元素称作为容器，子元素称作为项目，宽度被子元素平分，高度为 auto参照父元素</p><p>引入方式：@import url(“base css”)</p><p><strong>是否换行：**</strong>flex-wrap:**wrap（换行）/no warp(默认不换行)/warp-reverse（反向换行，第一行在下）</p><p><strong>在主轴的对齐方式：**</strong>justify-content<strong>**:</strong>flex-start（轴开始的位置）/center（轴中心）/flex-end（轴结束位置）/Space-between（两端对齐）/space-around(平均分配) <em>**</em></p><p><strong>主轴方向排列：**</strong>flex-direction:**row(行)  row-reverse(行反向)/ column(列)  column-reverse</p><p><strong>主轴方向</strong>row从左到右，row-reverse从右到左</p><p> <strong>Column从上到下</strong>     column-reverse   <strong>从下到上</strong></p><hr><p><strong>项目在单行的对齐方式，单行操作:</strong>align-items:**flex/flex-end/center/baseline</p><p>Flex   轴开始</p><p>Center  轴中心（在一行内居中）</p><p>Flex-end   轴结束</p><p>Baseline    基线</p><p><strong>项目在多行的对齐方式，多行操做：</strong>Align-content:**flex-start/center/flex-end/space-between/space-around</p><p><strong>对项目的操作：**</strong>order<strong>**:0</strong>(默认为0，容器中的项目从小到大排列)</p><p><strong>放大项目：**</strong>flex-grow:**0;(默认为不放大为0)</p><p><strong>缩小项目：**</strong>flex- Shrink:**1;(默认为1)</p><p><strong>项目自身对齐：</strong>Align-self:**flex-start/center/flex-end/space-between/space-around;</p><p><strong>项目宽度：Flex-basis:</strong>200px;相当于width:200px;</p><p><strong>Git分布式版本控制工具</strong></p><p>工作区     暂存区（本地仓库）    远程仓库</p><p>Cd 打开指令后边空格 </p><p>Cd 打开指令后边空格<br>Git分布式版本控制公具</p><p>Cd 打开指令后边空格<br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库 </p><p>Cd 打开指令后边空格<br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库<br>Git   clone克隆    git clone http//.  </p><p>Cd 打开指令后边空格<br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库<br>Git   clone克隆    git clone http//.<br>Git add .   (添加 .代表新建以及修改过得文件)</p><p>Cd 打开指令后边空格<br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库<br>Git   clone克隆    git clone http//.<br>Git add .   (添加 .代表新建以及修改过得文件)<br>Git  Status( 查看创建的文件状态)   git commit –m”初始化”</p><p>Cd 打开指令后边空格<br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库<br>Git   clone克隆    git clone http//.<br>Git add .   (添加 .代表新建以及修改过得文件)<br>Git  Status( 查看创建的文件状态)   git commit –m”初始化”<br>Git push  回车(推送)   git log 查看历史版本  git reset –hard</p><p>Cd 打开指令后边空格<br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库<br>Git   clone克隆    git clone http//.<br>Git add .   (添加 .代表新建以及修改过得文件)<br>Git  Status( 查看创建的文件状态)   git commit –m”初始化”<br>Git push  回车(推送)   git log 查看历史版本  git reset –hard<br>桌面创建coding文件夹</p><p>Cd 打开指令后边空格<br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库<br>Git   clone克隆    git clone http//.<br>Git add .   (添加 .代表新建以及修改过得文件)<br>Git  Status( 查看创建的文件状态)   git commit –m”初始化”<br>Git push  回车(推送)   git log 查看历史版本  git reset –hard<br>桌面创建coding文件夹<br>Cd空格(coding文件夹地址)</p><p>Cd 打开指令后边空格<br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库<br>Git   clone克隆    git clone http//.<br>Git add .   (添加 .代表新建以及修改过得文件)<br>Git  Status( 查看创建的文件状态)   git commit –m”初始化”<br>Git push  回车(推送)   git log 查看历史版本  git reset –hard<br>桌面创建coding文件夹<br>Cd空格(coding文件夹地址)<br>Git空格clone空格coing网页地址</p><p>Cd 打开指令后边空格<br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库<br>Git   clone克隆    git clone http//.<br>Git add .   (添加 .代表新建以及修改过得文件)<br>Git  Status( 查看创建的文件状态)   git commit –m”初始化”<br>Git push  回车(推送)   git log 查看历史版本  git reset –hard<br>桌面创建coding文件夹<br>Cd空格(coding文件夹地址)<br>Git空格clone空格coing网页地址<br>Cd空格xiaomi   5. git add空格.  </p><p>**</p><p><strong>H5表单控件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Form</span> <span class="attr">action</span>=<span class="string">”index.php”</span> <span class="attr">method</span>=<span class="string">”/get/post”</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">                         提交方式</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”text”name</span>=<span class="string">”username”</span> <span class="attr">value</span>=<span class="string">””</span> <span class="attr">required</span>  <span class="attr">minlength</span>=<span class="string">”5”</span> <span class="attr">maxlength</span>=<span class="string">”10”</span> <span class="attr">readonly</span>  <span class="attr">auto</span>/<span class="attr">autocomplete</span> =<span class="string">”off”(自动补充开关)</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>       </span><br><span class="line">属性      名字        属性值       必填项     最少输入字符数     最多输入字符数        只读</span><br><span class="line"></span><br><span class="line">密码:<span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">”password”</span> <span class="attr">name</span>=<span class="string">”password”</span> <span class="attr">value</span>=<span class="string">”123456”</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">男:<span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">”radio”</span> <span class="attr">name</span>=<span class="string">”sex”value</span>=<span class="string">”1”</span>&gt;</span></span><br><span class="line"></span><br><span class="line">女:<span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">”radio”</span> <span class="attr">name</span>=<span class="string">”sex”</span> <span class="attr">value</span>=<span class="string">”0”</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”checkbox”</span> <span class="attr">checked</span>(默认选中) <span class="attr">name</span>=<span class="string">”hobby”</span> <span class="attr">value</span>=<span class="string">”0”</span>&gt;</span>游泳</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”checkbox”</span> <span class="attr">name</span>=<span class="string">”hobby”</span> <span class="attr">value</span>=<span class="string">”1”</span>&gt;</span>轮滑</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”checkbox”</span> <span class="attr">name</span>=<span class="string">”hobby”</span> <span class="attr">value</span>=<span class="string">”2”</span>&gt;</span>篮球<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”file”</span> <span class="attr">multiple</span>(多选)&gt;</span></span><br><span class="line"></span><br><span class="line">下拉框：</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">”city”</span> <span class="attr">id</span>=<span class="string">””</span> <span class="attr">size</span>=<span class="string">”2”(框内显示个数)</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">”0”</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">”1”</span> <span class="attr">selected</span>(默认选中)&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">”2”</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">简介：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">”info”</span> <span class="attr">id</span> =<span class="string">””</span> <span class="attr">cols</span>=<span class="string">”30”(字数)</span> <span class="attr">rows</span>=<span class="string">”10”（行）</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line">数字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”number”</span> <span class="attr">name</span>=<span class="string">”number”</span> <span class="attr">max</span>=<span class="string">”10”</span> <span class="attr">min</span>=<span class="string">”0”</span> <span class="attr">step</span>=<span class="string">”2”(步进值)</span>&gt;</span></span><br><span class="line"></span><br><span class="line">滑块：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”range”</span> <span class="attr">name</span>=<span class="string">”number”</span> <span class="attr">max</span>=<span class="string">”10”</span> <span class="attr">min</span>=<span class="string">”0”</span> <span class="attr">step</span>=<span class="string">”2”(步进值)</span> <span class="attr">value</span>=<span class="string">”1”</span>&gt;</span></span><br><span class="line"></span><br><span class="line">日历：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”date”</span>&gt;</span>/<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”month”</span>&gt;</span>/<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”week”</span>&gt;</span>/<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”time”</span>&gt;</span></span><br><span class="line"> 年 年+月 年+周 年+时间</span><br><span class="line"></span><br><span class="line">颜色：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”color”</span>&gt;</span></span><br><span class="line"></span><br><span class="line">网址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”url”required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”email”</span>&gt;</span></span><br><span class="line"></span><br><span class="line">电话：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”tel”</span>&gt;</span></span><br><span class="line"></span><br><span class="line">搜索：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”search”</span>&gt;</span></span><br><span class="line"></span><br><span class="line">提示：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”text”</span> <span class="attr">value</span>=<span class="string">””</span> <span class="attr">autofocus</span> <span class="attr">placeholder</span>=<span class="string">”请输入用户名”</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     提示信息</span><br><span class="line"></span><br><span class="line">提交:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”submit”disabled</span> (不可使用)&gt;</span>           </span><br><span class="line"></span><br><span class="line">按钮：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”button”</span>&gt;</span></span><br><span class="line"></span><br><span class="line">重置：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”reset”</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"IDName"</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTML（HyperText Markup Language，超文本标记语言） 是用来定义网页结构的一种描述语言。&lt;/p&gt;
&lt;p&gt;HTML:超文本标记语言&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一．标签按照语法分类：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.单标签：开始标签&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>PS笔记</title>
    <link href="http://yoursite.com/2016/04/25/ps%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/25/ps笔记/</id>
    <published>2016-04-25T05:37:05.000Z</published>
    <updated>2018-10-31T03:14:39.639Z</updated>
    
    <content type="html"><![CDATA[<p><strong>2017.10.9  PS笔记</strong></p><h2 id="1-像素-分辨率："><a href="#1-像素-分辨率：" class="headerlink" title="1.像素/分辨率："></a>1.像素/分辨率：</h2><p><strong>屏幕显示一般使用72PPI（密度）</strong></p><p><strong>印刷一般使用300PPI</strong></p><p><strong>RGB:红，绿，蓝  用于屏幕显示</strong></p><p><strong>CMYK:青，品红，黄，黑   用于彩色印刷</strong></p><h2 id="2-存储格式"><a href="#2-存储格式" class="headerlink" title="2.存储格式"></a>2.存储格式</h2><p><strong>PSD格式 photoshop格式，保存图层等，可以多次编辑图像</strong></p><p><strong>JPG/JPEG:图片格式，不支持透</strong></p><p><strong>GIF:支持透明，有损压缩</strong></p><p><strong>PNG：存储空间小，支持透明，无损压缩</strong></p><h2 id="3-快捷键"><a href="#3-快捷键" class="headerlink" title="3.快捷键:"></a><strong>3.快捷键:</strong></h2><p><strong>新建画布：Ctrl+N</strong></p><p><strong>打开文件：ctrl+o</strong></p><p><strong>找图层：Ctrl</strong></p><p><strong>加选图层：ctrl</strong></p><p><strong>多选图层：shift</strong></p><p><strong>新建图层：Ctrl+shift+alt+n</strong></p><p><strong>移动图层：ctrl+『上移</strong></p><pre><code>**Ctrl+』下移**</code></pre><p><strong>图层置顶或者置底：Ctrl+shfit+『』</strong></p><h2 id="4-填充色"><a href="#4-填充色" class="headerlink" title="4.填充色:"></a><strong>4.填充色:</strong></h2><p><strong>默认前景色和背景色：D</strong></p><p><strong>切换前景色背景色：X</strong></p><p><strong>前景色：alt+delete</strong></p><p><strong>背景色：Ctrl+delete</strong></p><p><strong>原位复制：Ctrl+j</strong></p><p><strong>复制键：alt</strong></p><p><strong>选中选区：ctrl   点击小方块</strong></p><p><strong>取消选区</strong>：Ctrl+D</p><p><strong>选区换色方法适用于矩形，正方形</strong></p><p><strong>羽化：shift+f6</strong></p><p><strong>返回一步：Ctrl+Z</strong></p><p><strong>连续返回：ctrl+alt+z</strong></p><p><strong>按住AIT键，转动鼠标滚轮，放大缩小画布</strong></p><p><strong>放大缩小画布：Ctrl+ + 或 -</strong></p><p><strong>按住空格键，拖动画布</strong></p><hr><p><strong>打开或关闭标尺：Ctrl+R</strong></p><hr><p><strong>调整选区大小：Alt+S+t</strong></p><p><strong>自由变换：Ctrl+T</strong></p><p><strong>反选：Ctrl+Shift+I</strong></p><p><strong>复制变换：Ctrl+alt+shift+T</strong></p><p><strong>新建组：Ctrl+G</strong></p><p><strong>路径变选区：Ctrl+回车键</strong></p><p><strong>关闭或打开路径：Ctrl+Shift+H</strong></p><hr><p><strong>按住ALT键可同时缩放物体两边的宽度</strong></p><p><strong>裁剪出的背景颜色为，背景色中的颜色</strong></p><p><strong>魔棒容差值越小越精细</strong></p><p><strong>切片工具存储WEB格式为：PNG-24</strong></p><p><strong>按住Alt键选择可见的图层。其他图层就可以全部关闭。反之打开</strong></p><hr><p><strong>矢量图</strong></p><p><strong>矢量图经过放大缩小不会失真</strong></p><p><strong>双击缩略图可更改颜色</strong></p><p>**</p><h2 id="5-工具"><a href="#5-工具" class="headerlink" title="5.工具"></a>5.<strong>工具</strong></h2><p><strong>钢笔工具：</strong></p><p><strong>路径：</strong></p><p><strong>ALT键点击锚点可以删除其中的一个方向点，CTRL结束绘制</strong></p><p><strong>ALT**</strong>:<strong>**锚点在最后一个时，点击锚点可以重新绘制路径，锚点在中间是时，点击锚点可以去点把手，曲线变质先（尖角）；拖动锚点时，可以直线变回曲线。可以调整并断开单侧把手。</strong></p><p><strong>Ctrl</strong>:<strong>可以拖动锚点；可以调整双侧把手</strong></p><hr><p><strong>画笔工具：颜色为前景色，按住ALT键，点击右键左右缩放大小*</strong></p><p><strong>【】调正画笔大小</strong></p><h2 id="6-滤镜"><a href="#6-滤镜" class="headerlink" title="6.滤镜"></a>6.滤镜</h2><p><strong>祛痘：</strong></p><p><strong>1.背景拷贝</strong></p><ol><li><strong>污点修复工具大概祛下痘</strong></li></ol><ol><li><strong>通道选择我绿色拷贝</strong></li></ol><ol><li><strong>滤镜-其他-高反差保留（选择数值6）</strong></li></ol><ol><li><strong>图像-应用图像-线性光（重复直到无差时选择重叠）</strong></li></ol><ol><li><strong>选择通道绿色拷贝选区-返回图层-反选</strong></li></ol><p><strong>7.图层样式-曲线（微调，觉得不够重复以上步骤）</strong></p><p>**</p><p><strong>素描：1.复制图层，去色</strong></p><pre><code>**2.复制图层，反相**</code></pre><p>​        <strong>3.调整图层混合模式，正常变为颜色渐大或者线性简淡</strong></p><p>​       <strong>4.滤镜-其他-最小值（1-3）</strong></p><p>​       <strong>5.图层样式，混合选项中，在颜色混合带中，按住ALT键进行调整（下一个图层·）</strong></p><p>​       <strong>6.添加蒙版，在蒙版上添加杂色（200-300）选中蒙版-动感模糊</strong></p><p>**</p><p><strong>字体：</strong></p><p><strong>行间距取字号的1.5到2倍（80像素的字体应在120到160之间）</strong></p><p><strong>排版：用英文时，取左对齐；中文使用最后一行左对齐</strong></p><p><strong>避头尾法则设置，一定要设置宽松严格都可以</strong></p><p><strong>字体：中文一般使用微软雅黑，英文使用HELVETICA</strong></p><p>​       <strong>苹方              San Farncisco</strong></p><p><strong>画图技巧</strong></p><p>画同心圆：</p><p> ctrl+r标尺，在横纵标尺的交叉部分，和鼠标十字相重合，鼠 标左键+shift+alt画同心圆。</p><p><strong>同轴（中心）旋转效果</strong></p><p><strong>1.自由变换：Ctrl+T</strong></p><p><strong>2.按住ALT键调整重心位置</strong></p><p><strong>3.调整旋转度数</strong></p><p><strong>4.复制变换：Ctrl+alt+shift+T</strong></p><p><strong>作业中水温表彩色圆环的画法</strong>：先画一个圆只描边不填充，然后用标尺架一个十字，套索画出选区填充，之后剪贴蒙版，依次画</p><p><strong>关于蒙版</strong></p><p><img src="file:///C:\Users\vicgoo\AppData\Local\Temp\ksohtml\wps5007.tmp.jpg" alt=""> </p><ol><li>图片添加蒙版</li></ol><p>2.选择画笔涂抹（黑色删除，灰色恢复）</p><p><strong>图层样式：</strong></p><p><strong>图层样式中如果要在渐变叠加上剪贴蒙版要在混合选项中</strong><img src="file:///C:\Users\vicgoo\AppData\Local\Temp\ksohtml\wps3162.tmp.jpg" alt=""></p><p><strong>将剪贴图层混合成组前面的对勾取消，内部效果前面打勾</strong></p><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;2017.10.9  PS笔记&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-像素-分辨率：&quot;&gt;&lt;a href=&quot;#1-像素-分辨率：&quot; class=&quot;headerlink&quot; title=&quot;1.像素/分辨率：&quot;&gt;&lt;/a&gt;1.像素/分辨率：&lt;/h2&gt;&lt;p&gt;&lt;s
      
    
    </summary>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
</feed>
